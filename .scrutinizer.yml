filter:
    excluded_paths:
        - vendor/*
        - tests/*
        - bin/*
        - assets/*

checks:
    php:
        psr2_switch_declaration: false
        psr2_control_structure_declaration: false
        psr2_class_declaration: false
        avoid_superglobals: false
        one_class_per_file: false
        code_rating: true
        duplication: true
        variable_existence: true
        useless_calls: true
        use_statement_alias_conflict: true
        unused_variables: false
        unused_properties: true
        unused_parameters: false
        unreachable_code: true
        sql_injection_vulnerabilities: true
        security_vulnerabilities: true
        precedence_mistakes: true
        precedence_in_conditions: true
        parameter_non_unique: true
        no_property_on_interface: true
        no_non_implemented_abstract_methods: true
        deprecated_code_usage: true
        closure_use_not_conflicting: true
        closure_use_modifiable: true
        avoid_useless_overridden_methods: true
        avoid_conflicting_incrementers: true
        assignment_of_null_return: true
        unused_methods: true
        too_many_arguments: true
        no_debug_code: true
        missing_arguments: true
        argument_type_checks: false
        no_error_suppression: false
        property_assignments: false
        coding_standard:
            name: WordPress

tools:
    puppet_lint:
        flags: ''
    js_hint: true
    php_mess_detector:
        config:
            code_size_rules: { cyclomatic_complexity: true, npath_complexity: true, excessive_method_length: true, excessive_class_length: true, excessive_parameter_list: true, excessive_public_count: true, too_many_fields: true, too_many_methods: true, excessive_class_complexity: true }
            design_rules: { number_of_class_children: true, depth_of_inheritance: true, coupling_between_objects: true }
            unused_code_rules: { unused_local_variable: true, unused_private_method: true, unused_formal_parameter: true }
            naming_rules: { short_variable: true, long_variable: true, short_method: true, boolean_method_name: true }
            controversial_rules: { camel_case_class_name: true, camel_case_property_name: true, camel_case_method_name: true, camel_case_parameter_name: true, camel_case_variable_name: true, superglobals: false }
    php_cs_fixer:
        config:
            level: all
            fixers: { unused_use: true, phpdoc_params: true, braces: true, php_closing_tag: true }
    php_analyzer:
        config:
            suspicious_code: { enabled: true, overriding_parameter: true, overriding_closure_use: true, parameter_closure_use_conflict: true, parameter_multiple_times: true, non_existent_class_in_instanceof_check: true, non_existent_class_in_catch_clause: true, assignment_of_null_return: true, non_commented_switch_fallthrough: true, non_commented_empty_catch_block: true, overriding_private_members: true, use_statement_alias_conflict: true, precedence_in_condition_assignment: true }
            verify_php_doc_comments: { enabled: true, parameters: true, return: true, suggest_more_specific_types: true, ask_for_return_if_not_inferrable: true, ask_for_param_type_annotation: true }
            loops_must_use_braces: { enabled: true }
            simplify_boolean_return: { enabled: true }
            phpunit_checks: { enabled: true }
            reflection_fixes: { enabled: true }
            use_statement_fixes: { enabled: true, order_alphabetically: true, remove_unused: true, preserve_multiple: false, preserve_blanklines: false }
            parameter_reference_check: { enabled: false }
            checkstyle: { enabled: true, no_trailing_whitespace: true, naming: { enabled: true, local_variable: '^[a-z][a-zA-Z0-9]*$', abstract_class_name: ^Abstract|Factory$, utility_class_name: 'Utils?$', constant_name: '^[A-Z][A-Z0-9]*(?:_[A-Z0-9]+)*$', property_name: '^[a-z][a-zA-Z0-9]*$', method_name: '^(?:[a-z]|__)[a-zA-Z0-9]*$', parameter_name: '^[a-z][a-zA-Z0-9]*$', interface_name: '^[A-Z][a-zA-Z0-9]*Interface$', type_name: '^[A-Z][a-zA-Z0-9]*$', exception_name: '^[A-Z][a-zA-Z0-9]*Exception$', isser_method_name: '^(?:is|has|should|may|supports)' } }
            unreachable_code: { enabled: true }
            check_access_control: { enabled: false }
            typo_checks: { enabled: true }
            check_variables: { enabled: true }
            check_calls: { enabled: true, too_many_arguments: true, missing_argument: true, argument_type_checks: lenient }
            suspicious_code: { enabled: true, non_existent_class_in_instanceof_check: true, non_existent_class_in_catch_clause: true, non_commented_switch_fallthrough: true, non_commented_empty_catch_block: true, precedence_in_condition_assignment: true, overriding_parameter: false, overriding_closure_use: false, parameter_closure_use_conflict: false, parameter_multiple_times: false, assignment_of_null_return: false, overriding_private_members: false, use_statement_alias_conflict: false }
            dead_assignments: { enabled: true }
            verify_php_doc_comments: { enabled: true, parameters: true, return: true, suggest_more_specific_types: true, ask_for_return_if_not_inferrable: true, ask_for_param_type_annotation: true }
            loops_must_use_braces: { enabled: true }
            check_usage_context: { enabled: true, foreach: { value_as_reference: true, traversable: true } }
            simplify_boolean_return: { enabled: true }
            phpunit_checks: { enabled: false }
            reflection_checks: { enabled: false }
            precedence_checks: { enabled: true, assignment_in_condition: true, comparison_of_bit_result: true }
            basic_semantic_checks: { enabled: true }
            unused_code: { enabled: true }
            deprecation_checks: { enabled: true }
            useless_function_calls: { enabled: true }
            metrics_lack_of_cohesion_methods: { enabled: true }
            metrics_coupling: { enabled: true, stable_code: { namespace_prefixes: {  }, classes: {  } } }
            doctrine_parameter_binding: { enabled: false }
            doctrine_entity_manager_injection: { enabled: false }
            symfony_request_injection: { enabled: false }
            doc_comment_fixes: { enabled: false }
            reflection_fixes: { enabled: false }
            use_statement_fixes: { enabled: true, remove_unused: true, preserve_multiple: false, preserve_blanklines: false, order_alphabetically: false }
    php_code_sniffer:
        config:
            standard: WordPress
            sniffs: { wordpress: { arrays: { array_declaration_sniff: true }, classes: { valid_class_name_sniff: true }, files: { file_name_sniff: true }, formatting: { multiple_statement_alignment_sniff: true }, functions: { function_call_signature_sniff: true, function_declaration_argument_spacing_sniff: true }, naming_conventions: { valid_function_name_sniff: true }, objects: { object_instantiation_sniff: true }, php: { discouraged_functions_sniff: true }, strings: { double_quote_usage_sniff: true }, white_space: { control_structure_spacing_sniff: true, operator_spacing_sniff: true, php_indent_sniff: true }, xss: { escape_output_sniff: true } } }
    external_code_coverage: true
    sensiolabs_security_checker: true
    php_loc: true
    php_pdepend: true
    php_sim: true
    php_changetracking: true
    php_cpd: true
