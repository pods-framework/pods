var PodsMVFields = (function () {
  'use strict';

  var babelHelpers = {};
  babelHelpers.typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };
  babelHelpers;

  /*global jQuery, _, Backbone, Mn */
  /**
   *
   */
  var FileUploadModel = Backbone.Model.extend({
  	defaults: {
  		'id': 0,
  		'icon': '',
  		'name': '',
  		'edit_link': '',
  		'link': '',
  		'download': ''
  	}
  });

  /**
   *
   */
  var FileUploadCollection = Backbone.Collection.extend({
  	model: FileUploadModel
  });

  /*global jQuery, _, Backbone, Mn */

  /**
   *
   */
  var PodsFieldListView = Mn.CollectionView.extend({
  	initialize: function initialize(options) {
  		this.fieldModel = options.fieldModel;
  		this.childViewOptions = { fieldModel: options.fieldModel };
  	}
  });

  /**
   *
   */
  var PodsFieldView = Mn.LayoutView.extend({
  	serializeData: function serializeData() {
  		var fieldModel = this.options.fieldModel;
  		var data = this.model ? this.model.toJSON() : {};

  		data.field_type = fieldModel.get('type');
  		data.attr = fieldModel.get('attributes');
  		data.options = fieldModel.get('options');

  		return data;
  	}
  });

  /*global jQuery, _, Backbone, Mn, wp */
  var template$1 = '<input\n\tname="<%- attr.name %>[<%- id %>][id]"\n\tdata-name-clean="<%- attr.name_clean %>-id"\n\tid="<%- attr.id %>-<%- id %>-id"\n\tclass="<%- attr.class %>"\n\ttype="hidden"\n\tvalue="<%- id %>" />\n<ul class="pods-flex-meta media-item">\n\t<% if ( 1 != options.file_limit ) { %>\n\t\t<li class="pods-flex-col pods-flex-handle"><span>Reorder</span></li>\n\t<% } %>\n\t<li class="pods-flex-col pods-flex-icon"><img class="pinkynail" src="<%- icon %>" alt="Icon"></li>\n\t<li class="pods-flex-col pods-flex-name">\n\t\t<% if ( 0 != options.file_edit_title ) { %>\n\t\t\t<input\n\t\t\t\tname="<%- attr.name %>[<%- id %>][title]"\n\t\t\t\tdata-name-clean="<%- attr.name_clean %>-title"\n\t\t\t\tid="pods-form-ui-<%- attr.name_clean %>-<%- id %>-title"\n\t\t\t\tclass="pods-form-ui-field-type-text pods-form-ui-field-name-<%- attr.name_clean %>-title"\n\t\t\t\ttype="text"\n\t\t\t\tvalue="<%- name %>"\n\t\t\t\ttabindex="2"\n\t\t\t\tmaxlength="255" />\n\t\t<% } else { %>\n\t\t\t<%- name %>\n\t\t<% } %>\n\t</li>\n\t<li class="pods-flex-col pods-flex-remove"><a href="#remove">Remove</a></li>\n\t<% if ( 1 == options.file_linked && \'\' != download ) { %>\n\t\t<li class="pods-flex-col pods-flex-download"><a href="<%- download %>" target="_blank">Download</a></li>\n\t<% } %>\n\t<% if ( 1 == options.file_show_view_link && \'\' != link ) { %>\n\t\t<li class="pods-flex-col pods-flex-link"><a href="<%- link %>" target="_blank">View</a></li>\n\t<% } %>\n\t<% if ( 1 == options.file_show_edit_link && \'\' != edit_link ) { %>\n\t\t<li class="pods-flex-col pods-flex-edit"><a href="<%- edit_link %>" target="_blank">Edit</a></li>\n\t<% } %>\n</ul>\n';


  /**
   * Individual list items, representing a single file
   */
  var FileUploadItem = PodsFieldView.extend({
  	tagName: 'li',

  	className: 'pods-flex-item',

  	ui: {
  		dragHandle: '.pods-flex-handle',
  		editLink: '.pods-flex-edit-link',
  		viewLink: '.pods-flex-link',
  		downloadLink: '.pods-flex-download',
  		removeButton: '.pods-flex-remove',
  		itemName: '.pods-flex-name'
  	},

  	template: _.template(template$1),

  	triggers: {
  		'click @ui.removeButton': 'remove:file:click'
  	}
  });

  /**
   * The file list container
   */
  var FileUploadList = PodsFieldListView.extend({
  	tagName: 'ul',

  	className: 'pods-flex-list',

  	childView: FileUploadItem,

  	onAttach: function onAttach() {
  		var fieldOptions = this.options.fieldModel.get('options');

  		// @todo
  		// http://stackoverflow.com/questions/1735372/jquery-sortable-list-scroll-bar-jumps-up-when-sorting/4187833#4187833

  		if (1 != fieldOptions['file_limit']) {
  			var sort_axis = 'y';

  			if ('tiles' == fieldOptions['file_field_template']) {
  				sort_axis = '';
  			}

  			// init sortable
  			this.$el.sortable({
  				containment: 'parent',
  				axis: sort_axis,
  				scrollSensitivity: 40,
  				tolerance: 'pointer',
  				opacity: 0.6
  			});
  		}
  	}
  });

  /*global jQuery, _, Backbone, Mn, wp */
  var template$2 = '<a class="button pods-flex-add" href="#" tabindex="2"><%= options.file_add_button %></a>';


  var FileUploadForm = PodsFieldView.extend({
  	tagName: 'div',

  	ui: {
  		addButton: '.pods-flex-add'
  	},

  	template: _.template(template$2),

  	triggers: {
  		'click @ui.addButton': 'add:file:click'
  	}
  });

  /*global jQuery, _, Backbone, Mn */
  /**
   *
   * @param {Object} options
   *
   * @param {Object} options.browseButton   Existing and attached DOM node
   * @param {Object} options.uiRegion       Marionette.Region object
   * @param {Object} options.fieldOptions
   *
   * @param {string} options.fieldOptions.file_modal_title
   * @param {string} options.fieldOptions.file_modal_add_button
   * @param {string} options.fieldOptions.file_limit
   * @param {string} options.fieldOptions.limit_extensions
   * @param {string} options.fieldOptions.limit_types
   * @param {string} options.fieldOptions.file_attachment_tab
   *
   * @param {Object} options.fieldOptions.plupload_init
   * @param {Object} options.fieldOptions.plupload_init.browse_button
   *
   * @class
   */
  var PodsFileUploader = Mn.Object.extend({

    constructor: function constructor(options) {
      // Magically set the object properties we need, they'll just "be there" for the concrete instance
      this.browseButton = options.browseButton;
      this.uiRegion = options.uiRegion;
      this.fieldOptions = options.fieldOptions;

      Mn.Object.call(this, options);
    }

  });

  /*global jQuery, _, Backbone, Mn, wp */
  var template$3 = '<ul class="pods-flex-meta media-item">\n\t<% if ( \'\' === errorMsg ) { %>\n\t\t<li class="pods-flex-col pods-progress"><div class="progress-bar" style="width: <%- progress %>%;"></div></li>\n\t<% } %>\n\t<li class="pods-flex-col pods-flex-name"><%- filename %></li>\n</ul>\n<% if ( \'\' !== errorMsg ) { %>\n\t<div class="error"><%- errorMsg %></div>\n<% } %>\n';


  var FileUploadQueueModel = Backbone.Model.extend({
  	defaults: {
  		id: 0,
  		filename: '',
  		progress: 0,
  		errorMsg: ''
  	}
  });

  /**
   *
   */
  var FileUploadQueueItem = Mn.LayoutView.extend({
  	model: FileUploadQueueModel,

  	tagName: 'li',

  	template: _.template(template$3),

  	attributes: function attributes() {
  		return {
  			class: 'pods-flex-item',
  			id: this.model.get('id')
  		};
  	},

  	modelEvents: {
  		'change': 'onModelChanged'
  	},

  	onModelChanged: function onModelChanged() {
  		this.render();
  	}

  });

  /**
   *
   */
  var FileUploadQueue = Mn.CollectionView.extend({
  	tagName: 'ul',

  	className: 'pods-flex-list pods-flex-queue',

  	childView: FileUploadQueueItem
  });

  var Plupload = PodsFileUploader.extend({
  	plupload: {},

  	fileUploader: 'plupload',

  	initialize: function initialize() {
  		// Set the browse button argument for plupload... it's required
  		this.fieldOptions['plupload_init']['browse_button'] = this.browseButton;

  		this.plupload = new plupload.Uploader(this.fieldOptions['plupload_init']);
  		this.plupload.init();

  		// Setup all callbacks: ( event_name, callback, context )
  		this.plupload.bind('FilesAdded', this.onFilesAdded, this);
  		this.plupload.bind('UploadProgress', this.onUploadProgress, this);
  		this.plupload.bind('FileUploaded', this.onFileUploaded, this);
  	},

  	/**
    * Fired after files have been selected from the dialog
    *
    * @param up
    * @param files
    */
  	onFilesAdded: function onFilesAdded(up, files) {
  		var model = void 0,
  		    collection = void 0,
  		    view = void 0;

  		// Assemble the collection data for the file queue
  		collection = new Backbone.Collection();
  		jQuery.each(files, function (index, file) {
  			model = new FileUploadQueueModel({
  				id: file.id,
  				filename: file.name
  			});

  			collection.add(model);
  		});

  		// Create a new view based on the collection
  		view = new FileUploadQueue({ collection: collection });
  		view.render(); // Generate the HTML, not attached to the DOM yet

  		// Reset the region in case any error messages are hanging around from a previous upload
  		// and show the new file upload queue
  		this.uiRegion.reset();
  		this.uiRegion.show(view);

  		// Stash references
  		this.queueCollection = collection;

  		up.refresh();
  		up.start();
  	},

  	/**
    *
    * @param up
    * @param file
    */
  	onUploadProgress: function onUploadProgress(up, file) {
  		var model = this.queueCollection.get(file.id);
  		model.set({ progress: file.percent });
  	},

  	/**
    *
    * @param up
    * @param file
    * @param resp
    */
  	onFileUploaded: function onFileUploaded(up, file, resp) {
  		var model = this.queueCollection.get(file.id);
  		var response = resp.response;
  		var newFile = [];

  		// Error condition 1
  		if ("Error: " == resp.response.substr(0, 7)) {
  			response = response.substr(7);
  			if (window.console) {
  				console.log(response);
  			}

  			model.set({
  				progress: 0,
  				errorMsg: response
  			});
  		}
  		// Error condition 2
  		else if ("<e>" == resp.response.substr(0, 3)) {
  				response = jQuery(response).text(); // Strip tags, text only
  				if (window.console) {
  					console.log(response);
  				}

  				model.set({
  					progress: 0,
  					errorMsg: response
  				});
  			} else {
  				var json = response.match(/{.*}$/);

  				if (null !== json && 0 < json.length) {
  					json = jQuery.parseJSON(json[0]);
  				} else {
  					json = {};
  				}

  				if ('object' != (typeof json === 'undefined' ? 'undefined' : babelHelpers.typeof(json)) || jQuery.isEmptyObject(json)) {
  					if (window.console) {
  						console.log(response);
  					}
  					if (window.console) {
  						console.log(json);
  					}

  					model.set({
  						progress: 0,
  						errorMsg: 'There was an issue with the file upload, please try again.'
  					});
  					return;
  				}

  				newFile = {
  					id: json.ID,
  					icon: json.thumbnail,
  					name: json.post_title,
  					edit_link: json.edit_link,
  					link: json.link,
  					download: json.download
  				};

  				// Remove the file from the upload queue model and trigger an event for the hosting container
  				model.trigger('destroy', model);
  				this.trigger('added:files', newFile);
  			}
  	},

  	// This should never be called as plupload intercepts the button click event itself
  	invoke: function invoke() {
  		return;
  	}

  });

  var MediaModal = PodsFileUploader.extend({
  	mediaObject: {},

  	fileUploader: 'attachment',

  	invoke: function invoke() {

  		if (wp.Uploader.defaults.filters.mime_types === undefined) {
  			wp.Uploader.defaults.filters.mime_types = [{ title: 'Allowed Files', extensions: '*' }];
  		}

  		var defaultExt = wp.Uploader.defaults.filters.mime_types[0].extensions;

  		wp.Uploader.defaults.filters.mime_types[0].extensions = this.fieldOptions['limit_extensions'];

  		// set our settings
  		this.mediaObject = wp.media({
  			title: this.fieldOptions['file_modal_title'],
  			multiple: 1 != this.fieldOptions['file_limit'],
  			library: {
  				type: this.fieldOptions['limit_types']
  			},
  			// Customize the submit button.
  			button: {
  				// Set the text of the button.
  				text: this.fieldOptions['file_modal_add_button']
  			}
  		});

  		// One-shot callback ( event, callback, context )
  		this.mediaObject.once('select', this.onMediaSelect, this);

  		// open the frame
  		this.mediaObject.open();
  		this.mediaObject.content.mode(this.fieldOptions['file_attachment_tab']);

  		// Reset the allowed file extensions
  		wp.Uploader.defaults.filters.mime_types[0].extensions = defaultExt;
  	},

  	onMediaSelect: function onMediaSelect() {
  		var selection = this.mediaObject.state().get('selection');
  		var newFiles = [];

  		if (!selection) {
  			return;
  		}

  		// loop through the selected files
  		selection.each(function (attachment) {
  			var sizes = attachment.attributes.sizes;
  			var attachmentThumbnail = void 0;

  			// by default use the generic icon
  			attachmentThumbnail = attachment.attributes.icon;

  			// only thumbnails have sizes which is what we're on the hunt for
  			if (sizes !== undefined) {
  				// Get thumbnail if it exists
  				if (sizes.thumbnail !== undefined && sizes.thumbnail.url !== undefined) {
  					attachmentThumbnail = sizes.thumbnail.url;
  				} // If thumbnail doesn't exist, get full because this is a small image
  				else if (sizes.full !== undefined && sizes.full.url !== undefined) {
  						attachmentThumbnail = sizes.full.url;
  					}
  			}

  			newFiles.push({
  				id: attachment.attributes.id,
  				icon: attachmentThumbnail,
  				name: attachment.attributes.title,
  				edit_link: attachment.attributes.editLink,
  				link: attachment.attributes.link,
  				download: attachment.attributes.url
  			});
  		});

  		// Fire an event with an array of models to be added
  		this.trigger('added:files', newFiles);
  	}

  });

  /*global jQuery, _, Backbone, Mn */
  var template = '<div class="pods-ui-file-list"></div>\n<div class="pods-ui-region"></div>\n<div class="pods-ui-form"></div>\n';


  var Uploaders = [Plupload, MediaModal];

  var UNLIMITED_FILES = 0;

  var FileUpload = Mn.LayoutView.extend({
  	template: _.template(template),

  	regions: {
  		list: '.pods-ui-file-list',
  		uiRegion: '.pods-ui-region', // "Utility" container for uploaders to use
  		form: '.pods-ui-form'
  	},

  	uploader: {},

  	onRender: function onRender() {
  		var listView = new FileUploadList({ collection: this.collection, fieldModel: this.model });
  		var formView = new FileUploadForm({ fieldModel: this.model });

  		this.showChildView('list', listView);
  		this.showChildView('form', formView);

  		// Setup the uploader and listen for a response event
  		this.uploader = this.createUploader();
  		this.listenTo(this.uploader, 'added:files', this.onAddedFiles);
  	},

  	/**
    * Fired by a remove:file:click trigger in any child view
    *
    * @param childView View that was the source of the event
    */
  	onChildviewRemoveFileClick: function onChildviewRemoveFileClick(childView) {
  		this.collection.remove(childView.model);
  	},

  	/**
    * Fired by a add:file:click trigger in any child view
    *
    * plupload fields should never generate this event as it places a shim over our button and handles the event
    * internally
    */
  	onChildviewAddFileClick: function onChildviewAddFileClick() {
  		// Invoke the uploader
  		this.uploader.invoke();
  	},

  	/**
    * Concrete uploader implementations simply need to: this.trigger( 'added:files', newFiles )
    *
    * @param {Object[]} data An array of model objects to be added
    */
  	onAddedFiles: function onAddedFiles(data) {
  		var options = this.model.get('options');
  		var fileLimit = +options['file_limit']; // Unary plus to force to number
  		var newCollection = void 0,
  		    filteredModels = void 0;

  		// Get a copy of the existing collection with the new files added
  		newCollection = this.collection.clone();
  		newCollection.add(data);

  		// Enforce the file limit option if one is set
  		if (UNLIMITED_FILES === fileLimit) {
  			filteredModels = newCollection.models;
  		} else {
  			// Number of uploads is limited: keep the last N models, FIFO/queue style
  			filteredModels = newCollection.filter(function (model) {
  				return newCollection.indexOf(model) >= newCollection.length - fileLimit;
  			});
  		}

  		this.collection.reset(filteredModels);
  	},

  	createUploader: function createUploader() {
  		var options = this.model.get('options');
  		var targetUploader = options['file_uploader'];
  		var Uploader = void 0;

  		jQuery.each(Uploaders, function (index, thisUploader) {
  			if (targetUploader === thisUploader.prototype.fileUploader) {
  				Uploader = thisUploader;
  				return false;
  			}
  		});

  		if (Uploader !== undefined) {
  			this.uploader = new Uploader({
  				// We provide regular DOM element for the button
  				browseButton: this.getRegion('form').getEl('.pods-flex-add').get(),
  				uiRegion: this.getRegion('uiRegion'),
  				fieldOptions: options
  			});
  			return this.uploader;
  		} else {
  			throw "Could not locate file uploader '" + targetUploader + "'";
  		}
  	}
  });

  /*global jQuery, _, Backbone, Mn, wp */

  /**
   * A frame for displaying a modal popup with iframe content
   *
   * @augments wp.media.view.Frame
   */
  var IframeFrame = wp.media.view.Frame.extend({
  	className: 'pods-modal-frame',

  	template: _.template('<div class="media-frame-title" /><div class="media-frame-iframe" />'),

  	regions: ['title', 'iframe'],

  	initialize: function initialize() {
  		wp.media.view.Frame.prototype.initialize.apply(this, arguments);

  		// Ensure core UI is enabled.
  		this.$el.addClass('wp-core-ui');

  		this.initState();
  		this.initModal();

  		this.on('iframe:create:default', this.iframeContent, this);
  		this.iframe.mode('default');

  		this.on('title:create:default', this.createTitle, this);
  		this.title.mode('default');
  		this.on('title:render', function (view) {
  			view.$el.append('<span class="dashicons dashicons-arrow-down"></span>');
  		});
  	},

  	initState: function initState() {
  		var title = this.options.title || 'Add New Record';
  		var src = this.options.src || '/';

  		this.states.add([new wp.media.controller.State({
  			id: 'default',
  			title: title,
  			src: src
  		})]);

  		this.options.state = 'default';
  	},

  	initModal: function initModal() {
  		this.modal = new wp.media.view.Modal({
  			controller: this
  		});

  		this.modal.content(this);
  	},

  	render: function render() {
  		// Activate the default state if no active state exists.
  		if (!this.state() && this.options.state) {
  			this.setState(this.options.state);
  		}
  		/**
     * call 'render' directly on the parent class
     */
  		return wp.media.view.Frame.prototype.render.apply(this, arguments);
  	},

  	/**
    * @param {Object} content
    * @this wp.media.controller.Region
    */
  	iframeContent: function iframeContent(content) {
  		content.view = new wp.media.view.Iframe({
  			controller: this
  		});
  	},

  	createTitle: function createTitle(title) {
  		title.view = new wp.media.View({
  			controller: this,
  			tagName: 'h1'
  		});
  	}
  });

  /*global jQuery, _, Backbone, Mn, wp */
  var template$5 = '<div class="pods-field pods-boolean">\n\t<input\n\t\tname="<%- attr.name %>[<%= ordinal %>]"\n\t\t<%= selected ? \'checked="checked"\' : \'\' %>\n\t\tdata-name-clean="<%- attr.name_clean %>"\n\t\tdata-label="<%- options.label %>"\n\t\tid="<%- attr.id %><%= ordinal %>"\n\t\tclass="pods-form-ui-field-type-pick"\n\t\ttype="checkbox" tabindex="2" value="<%- id %>">\n\t<label class="pods-form-ui-label" for="<%- attr.id %><%= ordinal %>">\n\t\t<%= name %>\n\t</label>\n</div>\n';


  /**
   *
   */
  var CheckboxItem = PodsFieldView.extend({
  	tagName: 'li',

  	template: _.template(template$5),

  	className: 'pods-pick',

  	ui: {
  		checkbox: 'input.pods-form-ui-field-type-pick'
  	},

  	triggers: {
  		'click @ui.checkbox': 'toggle:selected'
  	},

  	modelEvents: {
  		'change': 'modelChanged'
  	},

  	templateHelpers: function templateHelpers() {
  		return {
  			ordinal: this.model.collection.indexOf(this.model)
  		};
  	},

  	modelChanged: function modelChanged() {
  		this.render();
  	},

  	onToggleSelected: function onToggleSelected() {
  		this.model.toggleSelected();
  	}
  });

  /**
   *
   */
  var CheckboxView = PodsFieldListView.extend({
  	tagName: 'ul',

  	className: 'pods-checkbox-view',

  	childView: CheckboxItem
  });

  /**
   *
   */
  var SelectItem = PodsFieldView.extend({
  	tagName: 'option',

  	template: false,

  	initialize: function initialize() {
  		this.$el.val(this.model.get('id'));

  		this.$el.html(this.model.get('name'));

  		if (this.model.get('selected')) {
  			this.$el.prop('selected', 'selected');
  		}
  	}
  });

  /**
   *
   */
  var SelectView = PodsFieldListView.extend({
  	tagName: 'select',

  	childView: SelectItem,

  	triggers: {
  		'change': 'change:selected'
  	},

  	attributes: function attributes() {

  		/**
     * @param {string} fieldAttributes.name
     * @param {string} fieldAttributes.class
     * @param {string} fieldAttributes.name_clean
     * @param {string} fieldAttributes.id
     *
     * @param {string} fieldOptions.pick_format_type 'single' or 'multi'
     */
  		var fieldModel = this.options.fieldModel;
  		var fieldAttributes = fieldModel.get('attributes');
  		var fieldOptions = fieldModel.get('options');

  		return {
  			'name': fieldAttributes.name + '[]',
  			'class': fieldAttributes.class,
  			'data-name-clean': fieldAttributes.name_clean,
  			'id': fieldAttributes.id,
  			'tabindex': '2',
  			'multiple': fieldOptions.pick_format_type === 'multi'
  		};
  	},

  	onChangeSelected: function onChangeSelected() {
  		this.collection.setSelected(this.$el.val());
  	}

  });

  /*global jQuery, _, Backbone, Mn, wp */
  var template$6 = '<input name="<%- attr.name %>[<%= ordinal %>]"\n\t\tdata-name-clean="<%- attr.name_clean %>"\n\t\tid="<%- attr.id %><%= ordinal %>"\n\t\ttype="hidden"\n\t\tvalue="<%- id %>>">\n<ul class="pods-flex-meta relationship-item">\n\t<li class="pods-flex-col pods-flex-handle"><span>Reorder</span></li>\n\t<% if ( 1 == options.pick_show_icon && \'\' != icon ) { %>\n\t\t<li class="pods-flex-col pods-flex-icon">\n\t\t\t<img class="pinkynail" src="<%- icon %>" alt="Icon">\n\t\t</li>\n\t<% } %>\n\t<li class="pods-flex-col pods-flex-name">\n\t\t<%= name %>\n\t</li>\n\t<li class="pods-flex-col pods-flex-remove"><a href="#remove">Remove</a></li>\n\t<% if ( 1 == options.pick_show_view_link && \'\' != link ) { %>\n\t\t<li class="pods-flex-col pods-flex-link"><a href="<%- link %>" target="_blank">View</a></li>\n\t<% } %>\n\t<% if ( 1 == options.pick_show_edit_link && \'\' != edit_link ) { %>\n\t\t<li class="pods-flex-col pods-flex-edit"><a href="<%- edit_link %>" target="_blank">Edit</a></li>\n\t<% } %>\n</ul>\n';


  /**
   *
   */
  var FlexItem = PodsFieldView.extend({
  	tagName: 'li',

  	className: 'pods-flex-item pods-relationship',

  	template: _.template(template$6),

  	ui: {
  		removeButton: '.pods-flex-remove a'
  	},

  	triggers: {
  		'click @ui.removeButton': 'remove:item:click'
  	},

  	templateHelpers: function templateHelpers() {
  		return {
  			ordinal: this.model.collection.indexOf(this.model)
  		};
  	}

  });

  /**
   *  Represents the markup of the container as a whole
   */
  var FlexView = PodsFieldListView.extend({ // Cache the template function for the overall container
  	tagName: 'ul',

  	className: 'pods-flex-list pods-relationship',

  	childView: FlexItem,

  	filter: function filter(child, index, collection) {
  		return child.attributes.selected;
  	},

  	onAttach: function onAttach() {

  		// @todo
  		// http://stackoverflow.com/questions/1735372/jquery-sortable-list-scroll-bar-jumps-up-when-sorting/4187833#4187833

  		// init sortable
  		this.$el.sortable({
  			containment: 'parent',
  			axis: 'y',
  			scrollSensitivity: 40,
  			tolerance: 'pointer',
  			opacity: 0.6
  		});
  	}

  });

  /*global jQuery, _, Backbone, Mn, wp */
  var template$7 = '<a href="/wp-admin/?pods_modal=1"\n\t\tclass="button pods-related-add-new pods-modal"\n\t\tdata-pod-id="<%- options.pod_id %>"\n\t\tdata-field-id="<%- options.id %>"\n\t\tdata-item-id="<%- options.item_id %>">\n\tAdd New\n</a>';


  var AddNew = PodsFieldView.extend({
  	tagName: 'div',

  	className: 'podsform-flex-relationship-container',

  	ui: {
  		addButton: '.pods-related-add-new'
  	},

  	template: _.template(template$7),

  	triggers: {
  		'click @ui.addButton': 'add:new:click'
  	}
  });

  /*global jQuery, _, Backbone, Mn, wp */
  var template$4 = '<div class="pods-pick-values"></div>\n<% if ( options.iframe_src != \'\' ) { %>\n\t<div class="pods-ui-add-new"></div>\n<% } %>';


  var views = {
  	'checkbox': CheckboxView,
  	'dropdown': SelectView,
  	'select': SelectView,
  	'radio': 'radio',
  	'autocomplete': 'select2',
  	'flexible': FlexView
  };

  /**
   *
   */
  var Pick = Mn.LayoutView.extend({
  	template: _.template(template$4),

  	regions: {
  		list: '.pods-pick-values',
  		addNew: '.pods-ui-add-new'
  	},

  	onRender: function onRender() {
  		var View = void 0,
  		    viewKey = void 0,
  		    list = void 0,
  		    addNew = void 0;
  		var fieldOptions = this.model.attributes.options;

  		// ToDo: don't follow the legacy badness here, require the caller to give us the proper view name
  		if (fieldOptions.pick_format_type !== 'multi') {
  			viewKey = fieldOptions.pick_format_single;
  		} else {
  			viewKey = fieldOptions.pick_format_multi;
  		}
  		View = views[viewKey];

  		if (View instanceof Mn.View) {
  			list = new View({ collection: this.collection, fieldModel: this.model });
  			this.showChildView('list', list);
  		}

  		if (fieldOptions.iframe_src !== '') {
  			addNew = new AddNew({ fieldModel: this.model });
  			this.showChildView('addNew', addNew);
  		}
  	},

  	/** "Remove" in flex view just toggles an item's selected attribute
    *
    * @param childView
    * @param args
    */
  	onChildviewRemoveItemClick: function onChildviewRemoveItemClick(childView, args) {
  		var list = this.getChildView('list');

  		args.model.toggleSelected();
  		list.render();
  	},

  	/**
    *
    * @param childView
    */
  	onChildviewAddNewClick: function onChildviewAddNewClick(childView) {
  		var options = this.model.get('options');

  		var modalFrame = new IframeFrame({
  			title: 'The Title',
  			src: options.iframe_src
  		});
  		modalFrame.modal.open();
  	},

  	addNewSuccess: function addNewSuccess(response) {
  		console.log(response);
  	}

  });



  var fieldClasses = Object.freeze({
  	FileUpload: FileUpload,
  	Pick: Pick
  });

  /*global jQuery, _, Backbone, Mn */
  var PodsFieldModel = Backbone.Model.extend({
  	defaults: {
  		type: 'hidden',
  		attributes: {},
  		options: {}
  	}
  });

  /*global jQuery, _, Backbone, Mn */

  /**
   *
   */
  var RelationshipModel = Backbone.Model.extend({
  	defaults: {
  		'id': 0,
  		'name': '',
  		'icon': '',
  		'link': '',
  		'edit_link': '',
  		'selected': false
  	},

  	toggleSelected: function toggleSelected() {
  		this.set('selected', !this.get('selected'));
  	}
  });

  /**
   *
   */
  var RelationshipCollection = Backbone.Collection.extend({
  	model: RelationshipModel,

  	/**
    *
    * @param { ?string[] } ids
    */
  	setSelected: function setSelected(ids) {
  		this.map(function (thisModel) {
  			var selected = _.contains(ids, thisModel.get('id') + '');
  			thisModel.set('selected', selected);
  		});
  	},

  	/**
    * Return a new collection containing just the selected items in this one
    *
    * @returns {*}
    */
  	filterSelected: function filterSelected() {

  		// Get an array with only the selected items
  		var filtered = this.filter(function (itemModel) {
  			return itemModel.get('selected');
  		});

  		// this.filter is going to return an array, so create a collection out of it
  		return new RelationshipCollection(filtered);
  	}
  });

  /**
   * @param {string} fieldType
   */
  var fieldFactory = function fieldFactory(fieldType) {
  	var field = {};

  	switch (fieldType) {
  		case 'file-upload':
  			field.control = FileUpload;
  			field.collection = FileUploadCollection;
  			break;

  		case 'pick':
  			field.control = Pick;
  			field.collection = RelationshipCollection;
  			break;
  	}

  	return field;
  };

  /**
   * Custom jQuery plugin to handle Pods Fields
   *
   * @param {Object} fields Object to which new fields will be added, in { fieldId: fieldInstance } format
   */
  var podsMVFieldsInit = function podsMVFieldsInit(fields) {

  	return this.each(function () {
  		var data = void 0,
  		    fieldModel = void 0,
  		    fieldId = void 0,
  		    fieldControl = void 0,
  		    field = void 0;

  		data = {
  			field_type: '',
  			field_meta: {
  				field_attributes: {},
  				field_options: {}
  			},
  			model_data: {}
  		};

  		// Combine data from all in-line data scripts in the container
  		jQuery(this).find('script.pods-mv-field-data').each(function () {
  			var thisData = jQuery.parseJSON(jQuery(this).html());
  			jQuery.extend(data, thisData);
  			jQuery(this).remove();
  		});

  		// Ignore anything that doesn't have the field type set
  		if (data.field_type !== undefined) {

  			fieldControl = fieldFactory(data.field_type);
  			if (fieldControl.control !== undefined) {
  				fieldModel = new PodsFieldModel({
  					type: data.field_type,
  					attributes: data.field_meta.field_attributes,
  					options: data.field_meta.field_options
  				});

  				fieldId = data.field_meta.field_attributes.id;

  				field = new fieldControl.control({
  					el: this,
  					model: fieldModel,
  					collection: new fieldControl.collection(data.model_data)
  				});
  				field.render();
  				fields[fieldId] = field;
  			}
  		}
  	});
  };

  // All fields

  var PodsMVFields = {
  	fieldClasses: fieldClasses,
  	fields: {}
  };
  /**
   * This is the workhorse that currently kicks everything off
   */
  jQuery.fn.podsMVFieldsInit = podsMVFieldsInit;
  jQuery(function () {
  	jQuery('.pods-form-ui-field').podsMVFieldsInit(PodsMVFields.fields);
  });

  return PodsMVFields;

}());