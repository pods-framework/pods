{"version":3,"sources":["/source/src/common/trigger-method.js","/source/src/common/monitor-view-events.js","/source/src/common/bind-events.js","/source/src/common/bind-requests.js","/source/src/mixins/behaviors.js","/source/src/utils/get-unique-event-name.js","/source/src/mixins/triggers.js","/source/src/utils/destroy-backbone-view.js","/source/src/common/build-region.js","/source/src/config/behaviors-lookup.js","/source/src/config/features.js","/source/src/utils/proxy.js","/source/src/utils/extend.js","/source/src/utils/deprecate.js","/source/src/common/is-node-attached.js","/source/src/common/merge-options.js","/source/src/common/get-option.js","/source/src/common/normalize-methods.js","/source/src/error.js","/source/src/utils/set-options.js","/source/src/mixins/common.js","/source/src/mixins/radio.js","/source/src/object.js","/source/src/template-cache.js","/source/src/utils/invoke.js","/source/src/mixins/delegate-entity-events.js","/source/src/mixins/ui.js","/source/src/mixins/view.js","/source/src/region.js","/source/src/mixins/regions.js","/source/src/config/renderer.js","/source/src/view.js","/source/src/utils/emulate-collection.js","/source/src/child-view-container.js","/source/src/collection-view.js","/source/src/composite-view.js","/source/src/behavior.js","/source/src/application.js","/source/src/app-router.js","/source/src/backbone.marionette.js"],"names":["getEventName","match","prefix","eventName","toUpperCase","triggerMethod","event","_len","arguments","length","args","Array","_key","methodName","getOnMethodName","method","getOption","call","this","result","_","isFunction","apply","trigger","triggerMethodOn","context","_len2","_key2","triggerMethodChildren","view","shouldTrigger","_getImmediateChildren","each","child","shouldTriggerAttach","_isAttached","shouldAttach","shouldTriggerDetach","shouldDetach","triggerDOMRefresh","_isRendered","handleBeforeAttach","handleAttach","handleBeforeDetach","handleDetach","handleRender","monitorViewEvents","_areViewEventsMonitored","on","before:attach","attach","before:detach","detach","render","bindFromStrings","target","entity","evt","methods","actionName","methodNames","split","MarionetteError","iterateEvents","bindings","isObject","message","url","isString","bindEvents","unbindEvents","iterateReplies","channel","normalizedRadioRequests","normalizeMethods","bindRequests","unbindRequests","getBehaviorClass","options","key","behaviorClass","Marionette","Behaviors","behaviorsLookup","parseBehaviors","behaviors","chain","map","BehaviorClass","_options","behavior","nestedBehaviors","concat","flatten","value","uniqueName","selector","uniqueId","join","buildViewTrigger","triggerDef","shouldPreventDefault","preventDefault","shouldStopPropagation","stopPropagation","e","destroyBackboneView","supportsDestroyLifecycle","remove","_isDestroyed","buildRegion","definition","defaults","Region","buildRegionFromDefinition","opts","extend","el","buildRegionFromObject","regionClass","deprecate","RegionClass","omit","isEnabled","name","FEATURES","setEnabled","state","proxy","Backbone","Model","test","prev","next","DEV_MODE","undefined","_cache","_warn","_console","console","warn","log","noop","isNodeAttached","$","contains","document","documentElement","mergeOptions","keys","_this","option","optionName","hash","reduce","normalizedHash","splitter","memoize","replace","errorProps","Error","urlRoot","version","constructor","error","pick","captureStackTrace","toString","setOptions","CommonMixin","_setOptions","RadioMixin","_initRadio","channelName","Radio","_channel","radioEvents","radioRequests","_destroyRadio","stopReplying","getChannel","ClassOptions","MarionetteObject","cid","cidPrefix","initialize","prototype","Events","isDestroyed","destroy","stopListening","TemplateCache","templateId","templateCaches","get","cachedTemplate","load","clear","i","compiledTemplate","template","loadTemplate","compileTemplate","$template","html","rawTemplate","_invoke","invokeMap","invoke","BehaviorsMixin","_initBehaviors","_behaviors","_getBehaviorTriggers","triggers","_toConsumableArray","_getBehaviorEvents","events","_proxyBehaviorViewProperties","_delegateBehaviorEntityEvents","_undelegateBehaviorEntityEvents","_destroyBehaviors","_bindBehaviorUIElements","_unbindBehaviorUIElements","_triggerEventOnBehaviors","DelegateEntityEventsMixin","_delegateEntityEvents","model","collection","_undelegateEntityEvents","modelEvents","collectionEvents","delegateEventSplitter","getUniqueEventName","TriggersMixin","_getViewTriggers","normalizeUIKeys","ui","memo","val","normalizedKey","normalizeUIString","uiString","r","slice","normalizeUIValues","properties","isArray","property","propertyVal","UIMixin","uiBindings","_getUIBindings","_bindUIElements","_uiBindings","_ui","_unbindUIElements","_this2","$el","_getUI","ViewMixin","supportsRenderLifecycle","isRendered","isAttached","delegateEvents","eventsArg","_buildEventProxies","viewEvents","_getEvents","combinedEvents","getTriggers","View","delegateEntityEvents","undelegateEntityEvents","_ensureViewIsIntact","unbindUIElements","_removeElement","_removeChildren","bindUIElements","getUI","childViewEventPrefix","ret","_triggerEventOnParentLayout","_childViewEvents","_childViewTriggers","layoutView","_parentView","_childViewEventHandler","parent","_parent","childViewEvents","childViewTriggers","childEventName","replaceElement","_isReplaced","_initEl","getEl","show","_ensureElement","_ensureView","currentView","empty","_empty","_renderView","_attachView","shouldReplaceEl","_replaceEl","attachHtml","allowMissingEl","_restoreEl","parentNode","replaceChild","isReplaced","appendChild","detachHtml","shouldDestroy","preventDestroy","off","_removeView","_detachView","detachView","contents","hasView","reset","RegionsMixin","_initRegions","regions","_regions","addRegions","_reInitRegions","addRegion","isEmpty","_addRegions","regionDefinitions","parentEl","partial","_addRegion","region","removeRegion","_removeRegion","removeRegions","getRegions","bind","emptyRegions","hasRegion","getRegion","clone","showChildView","detachChildView","getChildView","Renderer","data","templateFunc","serializeData","serializeModel","items","serializeCollection","attributes","setElement","hasEl","_renderTemplate","getTemplate","mixinTemplateContext","attachElContent","templateContext","compact","emulateCollection","object","listProperty","list","values","toArray","Container","views","_views","_indexByModel","_indexByCustom","_updateLength","add","customIndex","_add","viewCid","findByModel","findByModelCid","modelCid","findByCid","findByCustom","index","findByIndex","_remove","some","size","CollectionView","sort","once","_initialEvents","_initChildViewStorage","_bufferedChildren","_startBuffering","_isBuffering","_endBuffering","triggerOnChildren","attachBuffer","_createBuffer","children","listenTo","_onCollectionAdd","_onCollectionUpdate","_sortViews","at","indexOf","filter","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","_addChild","changes","_removeChildModels","removed","models","_ref","checkEmpty","shouldCheckEmpty","removedViews","_getRemovedViews","_updateIndices","_checkEmpty","removingViews","_removeChildView","push","_findGreatestIndexedView","greatestIndexedView","_index","_renderChildren","setFilter","_ref2","preventRender","canBeRendered","filterChanged","shouldRender","previousModels","_applyModelDeltas","removeFilter","currentIds","addedChildNotExists","removeModels","prevModel","reorder","_this3","_showingEmptyView","anyModelsAdded","filteredOutModels","elsToReorder","viewEls","_appendReorderedChildren","resortView","reorderOnSort","_this4","orderChanged","find","item","_emptyViewIndex","append","_destroyChildren","processedModels","_showEmptyView","_showCollection","_createView","ChildView","_getChildView","childViewOptions","_getChildViewOptions","buildChildView","_setupChildView","_proxyChildEvents","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","_this5","comparator","sortBy","EmptyView","_getEmptyView","emptyViewOptions","addChildView","emptyView","_getView","childView","increment","laterView","ChildViewClass","removeChildView","collectionView","buffer","elBuffer","createDocumentFragment","b","_insertBefore","_insertAfter","findPosition","before","ChildViewContainer","childModels","CompositeView","renderChildren","_isRendering","resetChildViewContainer","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","charAt","substr","MixinFromView","Behavior","proxyViewProperties","getEvents","behaviorEvents","behaviorHandler","behaviorTriggers","Application","_initRegion","_region","showView","getView","start","AppRouter","Router","appRoutes","controller","_getController","processAppRoutes","_processOnRoute","appRoute","route","_addAppRoute","routeName","routeArgs","onRoute","routePath","invert","routeNames","reverse","previousMarionette","noConflict","Object","VERSION"],"mappings":"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","file":"backbone.marionette.min.js","sourcesContent":["// Trigger Method\n// --------------\n\nimport _         from 'underscore';\nimport getOption from './get-option';\n\n// split the event name on the \":\"\nconst splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\nconst getOnMethodName = _.memoize(function(event) {\n  return 'on' + event.replace(splitter, getEventName);\n});\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  const methodName = getOnMethodName(event);\n  const method = getOption.call(this, methodName);\n  let result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger.apply(this, arguments);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nexport function triggerMethodOn(context, ...args) {\n  if (_.isFunction(context.triggerMethod)) {\n    return context.triggerMethod.apply(context, args);\n  }\n\n  return triggerMethod.apply(context, args);\n}\n","// DOM Refresh\n// -----------\n\nimport _ from 'underscore';\nimport { triggerMethodOn } from './trigger-method';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, shouldTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (!shouldTrigger(child)) { return; }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction shouldTriggerAttach(view) {\n  return !view._isAttached;\n}\n\nfunction shouldAttach(view) {\n  if (!shouldTriggerAttach(view)) { return false; }\n  view._isAttached = true;\n  return true;\n}\n\nfunction shouldTriggerDetach(view) {\n  return view._isAttached;\n}\n\nfunction shouldDetach(view) {\n  if (!shouldTriggerDetach(view)) { return false; }\n  view._isAttached = false;\n  return true;\n}\n\nfunction triggerDOMRefresh(view) {\n  if (view._isAttached && view._isRendered) {\n    triggerMethodOn(view, 'dom:refresh', view);\n  }\n}\n\nfunction handleBeforeAttach() {\n  triggerMethodChildren(this, 'before:attach', shouldTriggerAttach);\n}\n\nfunction handleAttach() {\n  triggerMethodChildren(this, 'attach', shouldAttach);\n  triggerDOMRefresh(this);\n}\n\nfunction handleBeforeDetach() {\n  triggerMethodChildren(this, 'before:detach', shouldTriggerDetach);\n}\n\nfunction handleDetach() {\n  triggerMethodChildren(this, 'detach', shouldDetach);\n}\n\nfunction handleRender() {\n  triggerDOMRefresh(this);\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction monitorViewEvents(view) {\n  if (view._areViewEventsMonitored) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach': handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach': handleDetach,\n    'render': handleRender\n  });\n}\n\nexport default monitorViewEvents;\n","// Bind Entity Events & Unbind Entity Events\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n// to methods on a target object.\n//\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\n//\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n// any object that has Backbone.Events mixed in) to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name.\n\nimport _               from 'underscore';\nimport MarionetteError from '../error';\n\n// Bind/unbind the event to handlers specified as a string of\n// handler names on the target object\nfunction bindFromStrings(target, entity, evt, methods, actionName) {\n  const methodNames = methods.split(/\\s+/);\n\n  _.each(methodNames, function(methodName) {\n    const method = target[methodName];\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was configured as an event handler, but does not exist.`);\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\n// generic looping function\nfunction iterateEvents(target, entity, bindings, actionName) {\n  if (!entity || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindevents'\n    });\n  }\n\n  // iterate the bindings and bind/unbind them\n  _.each(bindings, function(method, evt) {\n\n    // allow for a list of method names as a string\n    if (_.isString(method)) {\n      bindFromStrings(target, entity, evt, method, actionName);\n      return;\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\nfunction bindEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'listenTo');\n  return this;\n}\n\nfunction unbindEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'stopListening');\n  return this;\n}\n\n// Export Public API\nexport {\n  bindEvents,\n  unbindEvents\n};\n","// Bind/Unbind Radio Requests\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone.radio request\n// to methods on a target object.\n//\n// The first parameter, `target`, will set the context of the reply method\n//\n// The second parameter is the `Radio.channel` to bind the reply to.\n//\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\n// configuration. A function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport normalizeMethods from './normalize-methods';\nimport MarionetteError from '../error';\n\nfunction iterateReplies(target, channel, bindings, actionName) {\n  if (!channel || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindrequests'\n    });\n  }\n\n  const normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n  channel[actionName](normalizedRadioRequests, target);\n}\n\nfunction bindRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'reply');\n  return this;\n}\n\nfunction unbindRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'stopReplying');\n  return this;\n}\n\nexport {\n  bindRequests,\n  unbindRequests\n};\n","import _                        from 'underscore';\nimport _invoke                  from '../utils/invoke';\nimport { triggerMethod }        from '../common/trigger-method';\nimport Marionette               from '../backbone.marionette';\n\n// MixinOptions\n// - behaviors\n\n// Takes care of getting the behavior class\n// given options and a key.\n// If a user passes in options.behaviorClass\n// default to using that.\n// If a user passes in a Behavior Class directly, use that\n// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\nfunction getBehaviorClass(options, key) {\n  if (options.behaviorClass) {\n    return options.behaviorClass;\n    //treat functions as a Behavior constructor\n  } else if (_.isFunction(options)) {\n    return options;\n  }\n\n  // behaviorsLookup can be either a flat object or a method\n  if (_.isFunction(Marionette.Behaviors.behaviorsLookup)) {\n    return Marionette.Behaviors.behaviorsLookup(options, key)[key];\n  }\n\n  return Marionette.Behaviors.behaviorsLookup[key];\n}\n\n// Iterate over the behaviors object, for each behavior\n// instantiate it and get its grouped behaviors.\n// This accepts a list of behaviors in either an object or array form\nfunction parseBehaviors(view, behaviors) {\n  return _.chain(behaviors).map(function(options, key) {\n    const BehaviorClass = getBehaviorClass(options, key);\n    //if we're passed a class directly instead of an object\n    const _options = options === BehaviorClass ? {} : options;\n    const behavior = new BehaviorClass(_options, view);\n    const nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n    return [behavior].concat(nestedBehaviors);\n  }).flatten().value();\n}\n\nexport default {\n  _initBehaviors() {\n    const behaviors = _.result(this, 'behaviors');\n\n    // Behaviors defined on a view can be a flat object literal\n    // or it can be a function that returns an object.\n    this._behaviors = _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n  },\n\n  _getBehaviorTriggers() {\n    const triggers = _invoke(this._behaviors, 'getTriggers');\n    return _.extend({}, ...triggers);\n  },\n\n  _getBehaviorEvents() {\n    const events = _invoke(this._behaviors, 'getEvents');\n    return _.extend({}, ...events);\n  },\n\n  // proxy behavior $el to the view's $el.\n  _proxyBehaviorViewProperties() {\n    _invoke(this._behaviors, 'proxyViewProperties');\n  },\n\n  // delegate modelEvents and collectionEvents\n  _delegateBehaviorEntityEvents() {\n    _invoke(this._behaviors, 'delegateEntityEvents');\n  },\n\n  // undelegate modelEvents and collectionEvents\n  _undelegateBehaviorEntityEvents() {\n    _invoke(this._behaviors, 'undelegateEntityEvents');\n  },\n\n  _destroyBehaviors(args) {\n    // Call destroy on each behavior after\n    // destroying the view.\n    // This unbinds event listeners\n    // that behaviors have registered for.\n    _invoke(this._behaviors, 'destroy', ...args);\n  },\n\n  _bindBehaviorUIElements() {\n    _invoke(this._behaviors, 'bindUIElements');\n  },\n\n  _unbindBehaviorUIElements() {\n    _invoke(this._behaviors, 'unbindUIElements');\n  },\n\n  _triggerEventOnBehaviors() {\n    const behaviors = this._behaviors;\n    // Use good ol' for as this is a very hot function\n    for (let i = 0, length = behaviors && behaviors.length; i < length; i++) {\n      triggerMethod.apply(behaviors[i], arguments);\n    }\n  }\n};\n","import _ from 'underscore';\n\n// Borrow event splitter from Backbone\nconst delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nfunction uniqueName(eventName, selector) {\n  return [eventName + _.uniqueId('.evt'), selector].join(' ');\n}\n\n// Set event name to be namespaced using a unique index\n// to generate a non colliding event namespace\n// http://api.jquery.com/event.namespace/\nconst getUniqueEventName = function(eventName) {\n  const match = eventName.match(delegateEventSplitter);\n  return uniqueName(match[1], match[2]);\n};\n\nexport default getUniqueEventName;\n","import _ from 'underscore';\nimport getUniqueEventName from '../utils/get-unique-event-name';\n\n// Internal method to create an event handler for a given `triggerDef` like\n// 'click:foo'\nfunction buildViewTrigger(view, triggerDef) {\n  if (_.isString(triggerDef)) {\n    triggerDef = {event: triggerDef};\n  }\n\n  const eventName = triggerDef.event;\n  const shouldPreventDefault = triggerDef.preventDefault !== false;\n  const shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n  return function(e) {\n    if (shouldPreventDefault) {\n      e.preventDefault();\n    }\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n\n    view.triggerMethod(eventName, view);\n  };\n}\n\nexport default {\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getViewTriggers(view, triggers) {\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return _.reduce(triggers, (events, value, key) => {\n      key = getUniqueEventName(key);\n      events[key] = buildViewTrigger(view, value);\n      return events;\n    }, {});\n  }\n\n};\n","import { triggerMethodOn } from '../common/trigger-method';\n\nexport default function destroyBackboneView(view) {\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'before:destroy', view);\n  }\n\n  const shouldTriggerDetach = !!view._isAttached;\n\n  if (shouldTriggerDetach) {\n    triggerMethodOn(view, 'before:detach', view);\n  }\n\n  view.remove();\n\n  if (shouldTriggerDetach) {\n    view._isAttached = false;\n    triggerMethodOn(view, 'detach', view);\n  }\n\n  view._isDestroyed = true;\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'destroy', view);\n  }\n}\n","import _ from 'underscore';\nimport deprecate from '../utils/deprecate';\nimport MarionetteError from '../error';\nimport Region from '../region';\n\n// return the region instance from the definition\nexport default function(definition, defaults) {\n  if (definition instanceof Region) {\n    return definition;\n  }\n\n  return buildRegionFromDefinition(definition, defaults);\n}\n\nfunction buildRegionFromDefinition(definition, defaults) {\n  const opts = _.extend({}, defaults);\n\n  if (_.isString(definition)) {\n    _.extend(opts, { el: definition });\n\n    return buildRegionFromObject(opts);\n  }\n\n  if (_.isFunction(definition)) {\n    _.extend(opts, { regionClass: definition });\n\n    return buildRegionFromObject(opts);\n  }\n\n  if (_.isObject(definition)) {\n    if (definition.selector) {\n      deprecate('The selector option on a Region definition object is deprecated. Use el to pass a selector string');\n    }\n\n    _.extend(opts, { el: definition.selector }, definition);\n\n    return buildRegionFromObject(opts);\n  }\n\n  throw new MarionetteError({\n    message: 'Improper region configuration type.',\n    url: 'marionette.region.html#region-configuration-types'\n  });\n}\n\nfunction buildRegionFromObject(definition) {\n  const RegionClass = definition.regionClass\n\n  const options = _.omit(definition, 'regionClass');\n\n  return new RegionClass(options);\n}\n","import MarionetteError          from '../error';\n\n// Placeholder method to be extended by the user.\n// The method should define the object that stores the behaviors.\n// i.e.\n//\n// ```js\n// Marionette.Behaviors.behaviorsLookup: function() {\n//   return App.Behaviors\n// }\n// ```\nexport default function behaviorsLookup() {\n  throw new MarionetteError({\n    message: 'You must define where your behaviors are stored.',\n    url: 'marionette.behaviors.md#behaviorslookup'\n  });\n}\n","// Add Feature flags here\n// e.g. 'class' => false\nconst FEATURES = {\n};\n\nfunction isEnabled(name) {\n  return !!FEATURES[name];\n}\n\nfunction setEnabled(name, state) {\n  return FEATURES[name] = state;\n}\n\nexport {\n  FEATURES,\n  setEnabled,\n  isEnabled\n};\n","//Internal utility for creating context style global utils\nconst proxy = function(method) {\n  return function(context, ...args) {\n    return method.apply(context, args);\n  };\n};\n\nexport default proxy;\n","// Marionette.extend\n// -----------------\n\nimport Backbone from 'backbone';\n\n// Borrow the Backbone `extend` method so we can use it as needed\nconst extend = Backbone.Model.extend;\n\nexport default extend;\n","/* global console */\n\nimport _ from 'underscore';\n\nimport Marionette from '../backbone.marionette';\n\nconst deprecate = function(message, test) {\n  if (_.isObject(message)) {\n    message = (\n      message.prev + ' is going to be removed in the future. ' +\n      'Please use ' + message.next + ' instead.' +\n      (message.url ? ' See: ' + message.url : '')\n    );\n  }\n\n  if (!Marionette.DEV_MODE) {\n    return;\n  }\n\n  if ((test === undefined || !test) && !deprecate._cache[message]) {\n    deprecate._warn('Deprecation warning: ' + message);\n    deprecate._cache[message] = true;\n  }\n};\n\ndeprecate._console = typeof console !== 'undefined' ? console : {};\ndeprecate._warn = function() {\n  const warn = deprecate._console.warn || deprecate._console.log || _.noop;\n  return warn.apply(deprecate._console, arguments);\n};\ndeprecate._cache = {};\n\nexport default deprecate;\n","// Marionette.isNodeAttached\n// -------------------------\n\nimport Backbone from 'backbone';\n\n// Determine if `el` is a child of the document\nconst isNodeAttached = function(el) {\n  return Backbone.$.contains(document.documentElement, el);\n};\n\nexport default isNodeAttached;\n","import _ from 'underscore';\n\n// Merge `keys` from `options` onto `this`\nconst mergeOptions = function(options, keys) {\n  if (!options) { return; }\n\n  _.each(keys, (key) => {\n    const option = options[key];\n    if (option !== undefined) {\n      this[key] = option;\n    }\n  });\n};\n\nexport default mergeOptions;\n","// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from the\n// object or its `options`, with `options` taking precedence.\nconst getOption = function(optionName) {\n  if (!optionName) { return; }\n  if (this.options && (this.options[optionName] !== undefined)) {\n    return this.options[optionName];\n  } else {\n    return this[optionName];\n  }\n};\n\nexport default getOption;\n","import _ from 'underscore';\n\n// Marionette.normalizeMethods\n// ----------------------\n\n// Pass in a mapping of events => functions or function names\n// and return a mapping of events => functions\nconst normalizeMethods = function(hash) {\n  return _.reduce(hash, (normalizedHash, method, name) => {\n    if (!_.isFunction(method)) {\n      method = this[method];\n    }\n    if (method) {\n      normalizedHash[name] = method;\n    }\n    return normalizedHash;\n  }, {});\n};\n\nexport default normalizeMethods;\n","// Error\n// -----\n\nimport _      from 'underscore';\nimport extend from './utils/extend';\nimport {version} from '../package.json';\n\nconst errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\nconst MarionetteError = extend.call(Error, {\n  urlRoot: `http://marionettejs.com/docs/v${version}/`,\n\n  constructor(message, options) {\n    if (_.isObject(message)) {\n      options = message;\n      message = options.message;\n    } else if (!options) {\n      options = {};\n    }\n\n    const error = Error.call(this, message);\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n    this.captureStackTrace();\n\n    if (options.url) {\n      this.url = this.urlRoot + options.url;\n    }\n  },\n\n  captureStackTrace() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, MarionetteError);\n    }\n  },\n\n  toString() {\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n  }\n});\n\nMarionetteError.extend = extend;\n\nexport default MarionetteError;\n","import _ from 'underscore';\n\n// Internal utility for setting options consistently across Mn\nconst setOptions = function(...args) {\n  this.options = _.extend({}, _.result(this, 'options'), ...args);\n};\n\nexport default setOptions;\n","import _setOptions              from '../utils/set-options';\nimport getOption                from '../common/get-option';\nimport mergeOptions             from '../common/merge-options';\nimport normalizeMethods         from '../common/normalize-methods';\nimport {\n  bindEvents,\n  unbindEvents\n}                               from '../common/bind-events';\n\nexport default {\n\n  // Imports the \"normalizeMethods\" to transform hashes of\n  // events=>function references/names to a hash of events=>function references\n  normalizeMethods: normalizeMethods,\n\n  _setOptions: _setOptions,\n\n  // A handy way to merge passed-in options onto the instance\n  mergeOptions: mergeOptions,\n\n  // Enable getting options from this or this.options by name.\n  getOption: getOption,\n\n  // Enable binding view's events from another entity.\n  bindEvents: bindEvents,\n\n  // Enable unbinding view's events from another entity.\n  unbindEvents: unbindEvents\n};\n","import _ from 'underscore';\nimport Radio from 'backbone.radio';\n\nimport {\n  bindRequests,\n  unbindRequests\n} from '../common/bind-requests';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\nimport MarionetteError from '../error';\n\n// MixinOptions\n// - channelName\n// - radioEvents\n// - radioRequests\n\nexport default {\n\n  _initRadio() {\n    const channelName = _.result(this, 'channelName');\n\n    if (!channelName) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!Radio) {\n      throw new MarionetteError({\n        name: 'BackboneRadioMissing',\n        message: 'The dependency \"backbone.radio\" is missing.'\n      });\n    }\n\n    const channel = this._channel = Radio.channel(channelName);\n\n    const radioEvents = _.result(this, 'radioEvents');\n    this.bindEvents(channel, radioEvents);\n\n    const radioRequests = _.result(this, 'radioRequests');\n    this.bindRequests(channel, radioRequests);\n\n    this.on('destroy', this._destroyRadio);\n  },\n\n  _destroyRadio() {\n    this._channel.stopReplying(null, null, this);\n  },\n\n  getChannel() {\n    return this._channel;\n  },\n\n  // Proxy `bindEvents`\n  bindEvents: bindEvents,\n\n  // Proxy `unbindEvents`\n  unbindEvents: unbindEvents,\n\n  // Proxy `bindRequests`\n  bindRequests: bindRequests,\n\n  // Proxy `unbindRequests`\n  unbindRequests: unbindRequests\n\n};\n","// Object\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport extend from './utils/extend';\nimport { triggerMethod } from './common/trigger-method';\nimport CommonMixin from './mixins/common';\nimport RadioMixin from './mixins/radio';\n\nconst ClassOptions = [\n  'channelName',\n  'radioEvents',\n  'radioRequests'\n];\n\n// A Base Class that other Classes should descend from.\n// Object borrows many conventions and utilities from Backbone.\nconst MarionetteObject = function(options) {\n  this._setOptions(options);\n  this.mergeOptions(options, ClassOptions);\n  this.cid = _.uniqueId(this.cidPrefix);\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nMarionetteObject.extend = extend;\n\n// Object Methods\n// --------------\n\n// Ensure it can trigger events with Backbone.Events\n_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n  cidPrefix: 'mno',\n\n  // for parity with Marionette.AbstractView lifecyle\n  _isDestroyed: false,\n\n  isDestroyed() {\n    return this._isDestroyed;\n  },\n\n  //this is a noop method intended to be overridden by classes that extend from this base\n  initialize() {},\n\n  destroy(...args) {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:destroy', this, ...args);\n\n    this._isDestroyed = true;\n    this.triggerMethod('destroy', this, ...args);\n    this.stopListening();\n\n    return this;\n  },\n\n  triggerMethod: triggerMethod\n});\n\nexport default MarionetteObject;\n","// Template Cache\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport MarionetteError from './error';\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nconst TemplateCache = function(templateId) {\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating\n// your own TemplateCache instances\n_.extend(TemplateCache, {\n  templateCaches: {},\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get(templateId, options) {\n    let cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate) {\n      cachedTemplate = new TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load(options);\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the\n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear(...args) {\n    let i;\n    const length = args.length;\n\n    if (length > 0) {\n      for (i = 0; i < length; i++) {\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(TemplateCache.prototype, {\n\n  // Internal method to load the template\n  load(options) {\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate) {\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    const template = this.loadTemplate(this.templateId, options);\n    this.compiledTemplate = this.compileTemplate(template, options);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here:\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate(templateId, options) {\n    const $template = Backbone.$(templateId);\n\n    if (!$template.length) {\n      throw new MarionetteError({\n        name: 'NoTemplateError',\n        message: `Could not find template: \"${templateId}\"`\n      });\n    }\n    return $template.html();\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate(rawTemplate, options) {\n    return _.template(rawTemplate, options);\n  }\n});\n\nexport default TemplateCache;\n","// Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\n// lodash v3, v4, and underscore.js\nimport _ from 'underscore';\n\nexport default _.invokeMap || _.invoke;\n","import _ from 'underscore';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\n// MixinOptions\n// - collectionEvents\n// - modelEvents\n\nexport default {\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  _delegateEntityEvents(model, collection) {\n    this._undelegateEntityEvents(model, collection);\n\n    const modelEvents = _.result(this, 'modelEvents');\n    bindEvents.call(this, model, modelEvents);\n\n    const collectionEvents = _.result(this, 'collectionEvents');\n    bindEvents.call(this, collection, collectionEvents);\n  },\n\n  _undelegateEntityEvents(model, collection) {\n    const modelEvents = _.result(this, 'modelEvents');\n    unbindEvents.call(this, model, modelEvents);\n\n    const collectionEvents = _.result(this, 'collectionEvents');\n    unbindEvents.call(this, collection, collectionEvents);\n  }\n};\n","import _ from 'underscore';\n// allows for the use of the @ui. syntax within\n// a given key for triggers and events\n// swaps the @ui with the associated selector.\n// Returns a new, non-mutated, parsed events hash.\nconst normalizeUIKeys = function(hash, ui) {\n  return _.reduce(hash, (memo, val, key) => {\n    const normalizedKey = normalizeUIString(key, ui);\n    memo[normalizedKey] = val;\n    return memo;\n  }, {});\n};\n\n// utility method for parsing @ui. syntax strings\n// into associated selector\nconst normalizeUIString = function(uiString, ui) {\n  return uiString.replace(/@ui\\.[a-zA-Z-_$0-9]*/g, (r) => {\n    return ui[r.slice(4)];\n  });\n};\n\n// allows for the use of the @ui. syntax within\n// a given value for regions\n// swaps the @ui with the associated selector\nconst normalizeUIValues = function(hash, ui, properties) {\n  _.each(hash, (val, key) => {\n    if (_.isString(val)) {\n      hash[key] = normalizeUIString(val, ui);\n    } else if (_.isObject(val) && _.isArray(properties)) {\n      _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n      /* Value is an object, and we got an array of embedded property names to normalize. */\n      _.each(properties, (property) => {\n        const propertyVal = val[property];\n        if (_.isString(propertyVal)) {\n          val[property] = normalizeUIString(propertyVal, ui);\n        }\n      });\n    }\n  });\n  return hash;\n};\n\nexport default {\n\n  // normalize the keys of passed hash with the views `ui` selectors.\n  // `{\"@ui.foo\": \"bar\"}`\n  normalizeUIKeys(hash) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIKeys(hash, uiBindings);\n  },\n\n  // normalize the passed string with the views `ui` selectors.\n  // `\"@ui.bar\"`\n  normalizeUIString(uiString) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIString(uiString, uiBindings);\n  },\n\n  // normalize the values of passed hash with the views `ui` selectors.\n  // `{foo: \"@ui.bar\"}`\n  normalizeUIValues(hash, properties) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIValues(hash, uiBindings, properties);\n  },\n\n  _getUIBindings() {\n    const uiBindings = _.result(this, '_uiBindings');\n    const ui = _.result(this, 'ui');\n    return uiBindings || ui;\n  },\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  _bindUIElements() {\n    if (!this.ui) { return; }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings) {\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    const bindings = _.result(this, '_uiBindings');\n\n    // empty the ui so we don't have anything to start with\n    this._ui = {};\n\n    // bind each of the selectors\n    _.each(bindings, (selector, key) => {\n      this._ui[key] = this.$(selector);\n    });\n\n    this.ui = this._ui;\n  },\n\n  _unbindUIElements() {\n    if (!this.ui || !this._uiBindings) { return; }\n\n    // delete all of the existing ui bindings\n    _.each(this.ui, ($el, name) => {\n      delete this.ui[name];\n    });\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n    delete this._ui;\n  },\n\n  _getUI(name) {\n    return this._ui[name];\n  }\n};\n","// ViewMixin\n//  ---------\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport { triggerMethod } from '../common/trigger-method';\nimport BehaviorsMixin from './behaviors';\nimport CommonMixin from './common';\nimport DelegateEntityEventsMixin from './delegate-entity-events';\nimport TriggersMixin from './triggers';\nimport UIMixin from './ui';\nimport View from '../view';\nimport MarionetteError from '../error';\n\n// MixinOptions\n// - behaviors\n// - childViewEventPrefix\n// - childViewEvents\n// - childViewTriggers\n// - collectionEvents\n// - modelEvents\n// - triggers\n// - ui\n\n\nconst ViewMixin = {\n  supportsRenderLifecycle: true,\n  supportsDestroyLifecycle: true,\n\n  _isDestroyed: false,\n\n  isDestroyed() {\n    return !!this._isDestroyed;\n  },\n\n  _isRendered: false,\n\n  isRendered() {\n    return !!this._isRendered;\n  },\n\n  _isAttached: false,\n\n  isAttached() {\n    return !!this._isAttached;\n  },\n\n  // Overriding Backbone.View's `delegateEvents` to handle\n  // `events` and `triggers`\n  delegateEvents(eventsArg) {\n\n    this._proxyBehaviorViewProperties();\n    this._buildEventProxies();\n\n    const viewEvents = this._getEvents(eventsArg);\n\n    if (typeof eventsArg === 'undefined') {\n      this.events = viewEvents;\n    }\n\n    const combinedEvents = _.extend({},\n      this._getBehaviorEvents(),\n      viewEvents,\n      this._getBehaviorTriggers(),\n      this.getTriggers()\n    );\n\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n    return this;\n  },\n\n  _getEvents(eventsArg) {\n    const events = eventsArg || this.events;\n\n    if (_.isFunction(events)) {\n      return this.normalizeUIKeys(events.call(this));\n    }\n\n    return this.normalizeUIKeys(events);\n  },\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  getTriggers() {\n    if (!this.triggers) { return; }\n\n    // Allow `triggers` to be configured as a function\n    const triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return this._getViewTriggers(this, triggers);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents() {\n    this._delegateEntityEvents(this.model, this.collection);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n  undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.model, this.collection);\n\n    // unbind each behaviors model and collection events\n    this._undelegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Internal helper method to verify whether the view hasn't been destroyed\n  _ensureViewIsIntact() {\n    if (this._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: `View (cid: \"${this.cid}\") has already been destroyed and cannot be used.`\n      });\n    }\n  },\n\n  // Handle destroying the view and its children.\n  destroy(...args) {\n    if (this._isDestroyed) { return this; }\n    const shouldTriggerDetach = !!this._isAttached;\n\n    this.triggerMethod('before:destroy', this, ...args);\n    if (shouldTriggerDetach) {\n      this.triggerMethod('before:detach', this);\n    }\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n    this._removeElement();\n\n    if (shouldTriggerDetach) {\n      this._isAttached = false;\n      this.triggerMethod('detach', this);\n    }\n\n    // remove children after the remove to prevent extra paints\n    this._removeChildren();\n\n    this._destroyBehaviors(args);\n\n    this._isDestroyed = true;\n    this._isRendered = false;\n    this.triggerMethod('destroy', this, ...args);\n\n    this.stopListening();\n\n    return this;\n  },\n\n  bindUIElements() {\n    this._bindUIElements();\n    this._bindBehaviorUIElements();\n\n    return this;\n  },\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements() {\n    this._unbindUIElements();\n    this._unbindBehaviorUIElements();\n\n    return this;\n  },\n\n  getUI(name) {\n    this._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // used as the prefix for child view events\n  // that are forwarded through the layoutview\n  childViewEventPrefix: 'childview',\n\n  // import the `triggerMethod` to trigger events with corresponding\n  // methods if the method exists\n  triggerMethod() {\n    const ret = triggerMethod.apply(this, arguments);\n\n    this._triggerEventOnBehaviors.apply(this, arguments);\n    this._triggerEventOnParentLayout.apply(this, arguments);\n\n    return ret;\n  },\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  _buildEventProxies() {\n    this._childViewEvents = _.result(this, 'childViewEvents');\n    this._childViewTriggers = _.result(this, 'childViewTriggers');\n  },\n\n  _triggerEventOnParentLayout() {\n    const layoutView = this._parentView();\n    if (!layoutView) {\n      return;\n    }\n\n    layoutView._childViewEventHandler.apply(layoutView, arguments);\n  },\n\n  // Walk the _parent tree until we find a view (if one exists).\n  // Returns the parent view hierarchically closest to this view.\n  _parentView() {\n    let parent = this._parent;\n\n    while (parent) {\n      if (parent instanceof View) {\n        return parent;\n      }\n      parent = parent._parent;\n    }\n  },\n\n  _childViewEventHandler(eventName, ...args) {\n    const childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n    // call collectionView childViewEvent if defined\n    if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n      childViewEvents[eventName].apply(this, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const childViewTriggers = this._childViewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n      this.triggerMethod(childViewTriggers[eventName], ...args);\n    }\n\n    const prefix = _.result(this, 'childViewEventPrefix');\n\n    if (prefix !== false) {\n      const childEventName = prefix + ':' + eventName;\n\n      this.triggerMethod(childEventName, ...args);\n    }\n  }\n};\n\n_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin,  UIMixin);\n\nexport default ViewMixin;\n","// Region\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport deprecate from './utils/deprecate';\nimport destroyBackboneView from './utils/destroy-backbone-view';\nimport monitorViewEvents from './common/monitor-view-events';\nimport isNodeAttached from './common/is-node-attached';\nimport { triggerMethodOn } from './common/trigger-method';\nimport MarionetteObject from './object';\nimport MarionetteError from './error';\n\nconst ClassOptions = [\n  'allowMissingEl',\n  'parentEl',\n  'replaceElement'\n];\n\nconst Region = MarionetteObject.extend({\n  cidPrefix: 'mnr',\n  replaceElement: false,\n  _isReplaced: false,\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    // getOption necessary because options.el may be passed as undefined\n    this._initEl = this.el = this.getOption('el');\n\n    // Handle when this.el is passed in as a $ wrapped element.\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n    if (!this.el) {\n      throw new MarionetteError({\n        name: 'NoElError',\n        message: 'An \"el\" must be specified for a region.'\n      });\n    }\n\n    this.$el = this.getEl(this.el);\n    MarionetteObject.call(this, options);\n  },\n\n  // Displays a backbone view instance inside of the region. Handles calling the `render`\n  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n  // option can be used to prevent a view from the old view being destroyed on show.\n  show(view, options) {\n    if (!this._ensureElement(options)) {\n      return;\n    }\n    this._ensureView(view);\n    if (view === this.currentView) { return this; }\n\n    this.triggerMethod('before:show', this, view, options);\n\n    monitorViewEvents(view);\n\n    this.empty(options);\n\n    // We need to listen for if a view is destroyed in a way other than through the region.\n    // If this happens we need to remove the reference to the currentView since once a view\n    // has been destroyed we can not reuse it.\n    view.on('destroy', this._empty, this);\n\n    // Make this region the view's parent.\n    // It's important that this parent binding happens before rendering so that any events\n    // the child may trigger during render can also be triggered on the child's ancestor views.\n    view._parent = this;\n\n    this._renderView(view);\n\n    this._attachView(view, options);\n\n    this.triggerMethod('show', this, view, options);\n    return this;\n  },\n\n  _renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n  },\n\n  _attachView(view, options = {}) {\n    const shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n    const shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!_.result(this, 'replaceElement') : !!options.replaceElement;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    if (shouldReplaceEl) {\n      this._replaceEl(view);\n    } else {\n      this.attachHtml(view);\n    }\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n\n    this.currentView = view;\n  },\n\n  _ensureElement(options = {}) {\n    if (!_.isObject(this.el)) {\n      this.$el = this.getEl(this.el);\n      this.el = this.$el[0];\n    }\n\n    if (!this.$el || this.$el.length === 0) {\n      const allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!_.result(this, 'allowMissingEl') : !!options.allowMissingEl;\n\n      if (allowMissingEl) {\n        return false;\n      } else {\n        throw new MarionetteError(`An \"el\" must exist in DOM for this region ${this.cid}`);\n      }\n    }\n    return true;\n  },\n\n  _ensureView(view) {\n    if (!view) {\n      throw new MarionetteError({\n        name: 'ViewNotValid',\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n      });\n    }\n\n    if (view._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: `View (cid: \"${view.cid}\") has already been destroyed and cannot be used.`\n      });\n    }\n  },\n\n  // Override this method to change how the region finds the DOM element that it manages. Return\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n  getEl(el) {\n    return Backbone.$(el, _.result(this, 'parentEl'));\n  },\n\n  _replaceEl(view) {\n    // always restore the el to ensure the regions el is present before replacing\n    this._restoreEl();\n\n    const parent = this.el.parentNode;\n\n    parent.replaceChild(view.el, this.el);\n    this._isReplaced = true;\n  },\n\n  // Restore the region's element in the DOM.\n  _restoreEl() {\n    // There is nothing to replace\n    if (!this._isReplaced) {\n      return;\n    }\n\n    const view = this.currentView;\n\n    if (!view) {\n      return;\n    }\n\n    const parent = view.el.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    parent.replaceChild(this.el, view.el);\n    this._isReplaced = false;\n  },\n\n  // Check to see if the region's el was replaced.\n  isReplaced() {\n    return !!this._isReplaced;\n  },\n\n  // Override this method to change how the new view is appended to the `$el` that the\n  // region is managing\n  attachHtml(view) {\n    this.el.appendChild(view.el);\n  },\n\n  // Destroy the current view, if there is one. If there is no current view, it does\n  // nothing and returns immediately.\n  empty(options = { allowMissingEl: true }) {\n    const view = this.currentView;\n\n    // If there is no view in the region we should only detach current html\n    if (!view) {\n      if (this._ensureElement(options)) {\n        this.detachHtml();\n      }\n      return this;\n    }\n\n    const shouldDestroy = !options.preventDestroy;\n\n    if (!shouldDestroy) {\n      deprecate('The preventDestroy option is deprecated. Use Region#detachView');\n    }\n\n    this._empty(view, shouldDestroy);\n    return this;\n  },\n\n  _empty(view, shouldDestroy) {\n    view.off('destroy', this._empty, this);\n    this.triggerMethod('before:empty', this, view);\n\n    this._restoreEl();\n\n    delete this.currentView;\n\n    if (!view._isDestroyed) {\n      this._removeView(view, shouldDestroy);\n      delete view._parent;\n    }\n\n    this.triggerMethod('empty', this, view);\n  },\n\n  _removeView(view, shouldDestroy) {\n    if (!shouldDestroy) {\n      this._detachView(view);\n      return;\n    }\n\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      destroyBackboneView(view);\n    }\n  },\n\n  detachView() {\n    const view = this.currentView;\n\n    if (!view) {\n      return;\n    }\n\n    this._empty(view);\n\n    return view;\n  },\n\n  _detachView(view) {\n    const shouldTriggerDetach = !!view._isAttached;\n    if (shouldTriggerDetach) {\n      triggerMethodOn(view, 'before:detach', view);\n    }\n\n    this.detachHtml();\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      triggerMethodOn(view, 'detach', view);\n    }\n  },\n\n  // Override this method to change how the region detaches current content\n  detachHtml() {\n    this.$el.contents().detach();\n  },\n\n  // Checks whether a view is currently present within the region. Returns `true` if there is\n  // and `false` if no view is present.\n  hasView() {\n    return !!this.currentView;\n  },\n\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n  // The next time a view is shown via this region, the region will re-query the DOM for\n  // the region's `el`.\n  reset(options) {\n    this.empty(options);\n\n    if (this.$el) {\n      this.el = this._initEl;\n    }\n\n    delete this.$el;\n    return this;\n  },\n\n  destroy(options) {\n    this.reset(options);\n    return MarionetteObject.prototype.destroy.apply(this, arguments);\n  }\n});\n\nexport default Region;\n","import _ from 'underscore';\nimport _invoke from '../utils/invoke';\nimport buildRegion from '../common/build-region';\nimport Region from '../region';\n\n// MixinOptions\n// - regions\n// - regionClass\n\nexport default {\n  regionClass: Region,\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this View.\n  _initRegions() {\n\n    // init regions hash\n    this.regions =  this.regions || {};\n    this._regions = {};\n\n    this.addRegions(_.result(this, 'regions'));\n  },\n\n  // Internal method to re-initialize all of the regions by updating\n  // the `el` that they point to\n  _reInitRegions() {\n    _invoke(this._regions, 'reset');\n  },\n\n  // Add a single region, by name, to the View\n  addRegion(name, definition) {\n    const regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions(regions) {\n    // If there's nothing to add, stop here.\n    if (_.isEmpty(regions)) {\n      return;\n    }\n\n    // Normalize region selectors hash to allow\n    // a user to use the @ui. syntax.\n    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n    // Add the regions definitions to the regions property\n    this.regions = _.extend({}, this.regions, regions);\n\n    return this._addRegions(regions);\n  },\n\n  // internal method to build and add regions\n  _addRegions(regionDefinitions) {\n    const defaults = {\n      regionClass: this.regionClass,\n      parentEl: _.partial(_.result, this, 'el')\n    };\n\n    return _.reduce(regionDefinitions, (regions, definition, name) => {\n      regions[name] = buildRegion(definition, defaults);\n      this._addRegion(regions[name], name);\n      return regions;\n    }, {});\n  },\n\n  _addRegion(region, name) {\n    this.triggerMethod('before:add:region', this, name, region);\n\n    region._parent = this;\n\n    this._regions[name] = region;\n\n    this.triggerMethod('add:region', this, name, region);\n  },\n\n  // Remove a single region from the View, by name\n  removeRegion(name) {\n    const region = this._regions[name];\n\n    this._removeRegion(region, name);\n\n    return region;\n  },\n\n  // Remove all regions from the View\n  removeRegions() {\n    const regions = this.getRegions();\n\n    _.each(this._regions, _.bind(this._removeRegion, this));\n\n    return regions;\n  },\n\n  _removeRegion(region, name) {\n    this.triggerMethod('before:remove:region', this, name, region);\n\n    region.destroy();\n\n    delete this.regions[name];\n    delete this._regions[name];\n\n    this.triggerMethod('remove:region', this, name, region);\n  },\n\n  // Empty all regions in the region manager, but\n  // leave them attached\n  emptyRegions() {\n    const regions = this.getRegions();\n    _invoke(regions, 'empty');\n    return regions;\n  },\n\n  // Checks to see if view contains region\n  // Accepts the region name\n  // hasRegion('main')\n  hasRegion(name) {\n    return !!this.getRegion(name);\n  },\n\n  // Provides access to regions\n  // Accepts the region name\n  // getRegion('main')\n  getRegion(name) {\n    return this._regions[name];\n  },\n\n  // Get all regions\n  getRegions() {\n    return _.clone(this._regions);\n  },\n\n  showChildView(name, view, ...args) {\n    const region = this.getRegion(name);\n    return region.show(view, ...args);\n  },\n\n  detachChildView(name) {\n    return this.getRegion(name).detachView();\n  },\n\n  getChildView(name) {\n    return this.getRegion(name).currentView;\n  }\n\n};\n","// Renderer\n// --------\n\nimport _               from 'underscore';\nimport MarionetteError from '../error';\nimport TemplateCache   from '../template-cache';\n\n// Render a template with data by passing in the template\n// selector and the data to render.\nconst Renderer = {\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function. Override this method to provide your own\n  // custom rendering and template handling for all of Marionette.\n  render(template, data) {\n    if (!template) {\n      throw new MarionetteError({\n        name: 'TemplateNotFoundError',\n        message: 'Cannot render the template since its false, null or undefined.'\n      });\n    }\n\n    const templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n    return templateFunc(data);\n  }\n};\n\nexport default Renderer;\n","// View\n// ---------\n\nimport _                  from 'underscore';\nimport Backbone           from 'backbone';\nimport isNodeAttached     from './common/is-node-attached';\nimport monitorViewEvents  from './common/monitor-view-events';\nimport ViewMixin          from './mixins/view';\nimport RegionsMixin       from './mixins/regions';\nimport Renderer           from './config/renderer';\n\nconst ClassOptions = [\n  'behaviors',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'modelEvents',\n  'regionClass',\n  'regions',\n  'template',\n  'templateContext',\n  'triggers',\n  'ui'\n];\n\n// The standard view. Includes view events, automatic rendering\n// of Underscore templates, nested views, and more.\nconst View = Backbone.View.extend({\n\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this._initRegions();\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n  },\n\n  // Serialize the view's model *or* collection, if\n  // it exists, for the template\n  serializeData() {\n    if (!this.model && !this.collection) {\n      return {};\n    }\n\n    // If we have a model, we serialize that\n    if (this.model) {\n      return this.serializeModel();\n    }\n\n    // Otherwise, we serialize the collection,\n    // making it available under the `items` property\n    return {\n      items: this.serializeCollection()\n    };\n  },\n\n  // Prepares the special `model` property of a view\n  // for being displayed in the template. By default\n  // we simply clone the attributes. Override this if\n  // you need a custom transformation for your view's model\n  serializeModel() {\n    if (!this.model) { return {}; }\n    return _.clone(this.model.attributes);\n  },\n\n  // Serialize a collection by cloning each of\n  // its model's attributes\n  serializeCollection() {\n    if (!this.collection) { return {}; }\n    return this.collection.map(function(model) { return _.clone(model.attributes); });\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // rendered or attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isRendered = !!this.$el.length;\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    if (this._isRendered) {\n      this.bindUIElements();\n    }\n\n    return this;\n  },\n\n  // Render the view, defaulting to underscore.js templates.\n  // You can override this in your view definition to provide\n  // a very specific rendering for your view. In general, though,\n  // you should override the `Marionette.Renderer` object to\n  // change how Marionette renders views.\n  // Subsequent renders after the first will re-render all nested\n  // views.\n  render() {\n    this._ensureViewIsIntact();\n\n    this.triggerMethod('before:render', this);\n\n    // If this is not the first render call, then we need to\n    // re-initialize the `el` for each region\n    if (this._isRendered) {\n      this._reInitRegions();\n    }\n\n    this._renderTemplate();\n    this.bindUIElements();\n\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n\n    return this;\n  },\n\n  // Internal method to render the template with the serialized data\n  // and template context via the `Marionette.Renderer` object.\n  _renderTemplate() {\n    const template = this.getTemplate();\n\n    // Allow template-less views\n    if (template === false) {\n      return;\n    }\n\n    // Add in entity data and template context\n    const data = this.mixinTemplateContext(this.serializeData());\n\n    // Render and add to el\n    const html = Renderer.render(template, data, this);\n    this.attachElContent(html);\n  },\n\n  // Get the template for this view\n  // instance. You can set a `template` attribute in the view\n  // definition or pass a `template: \"whatever\"` parameter in\n  // to the constructor options.\n  getTemplate() {\n    return this.template;\n  },\n\n  // Mix in template context methods. Looks for a\n  // `templateContext` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateContext(target = {}) {\n    const templateContext = _.result(this, 'templateContext');\n    return _.extend(target, templateContext);\n  },\n\n  // Attaches the content of a given view.\n  // This method can be overridden to optimize rendering,\n  // or to render in a non standard way.\n  //\n  // For example, using `innerHTML` instead of `$el.html`\n  //\n  // ```js\n  // attachElContent(html) {\n  //   this.el.innerHTML = html;\n  //   return this;\n  // }\n  // ```\n  attachElContent(html) {\n    this.$el.html(html);\n\n    return this;\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this.removeRegions();\n  },\n\n  _getImmediateChildren() {\n    return _.chain(this.getRegions())\n      .map('currentView')\n      .compact()\n      .value();\n  }\n});\n\n_.extend(View.prototype, ViewMixin, RegionsMixin);\n\nexport default View;\n","// Mix in methods from Underscore, for iteration, and other\n// collection related features.\n// Borrowing this code from Backbone.Collection:\n// https://github.com/jashkenas/backbone/blob/1.1.2/backbone.js#L962\n\nimport _ from 'underscore';\n\nconst methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\n                'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n                'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\n                'last', 'without', 'isEmpty', 'pluck', 'reduce'];\n\nconst emulateCollection = function(object, listProperty) {\n  _.each(methods, function(method) {\n    object[method] = function() {\n      const list = _.values(_.result(this, listProperty));\n      const args = [list].concat(_.toArray(arguments));\n      return _[method].apply(_, args);\n    };\n  });\n};\n\nexport default emulateCollection;\n","import _ from 'underscore';\nimport emulateCollection from './utils/emulate-collection';\n\n// Provide a container to store, retrieve and\n// shut down child views.\nconst Container = function(views) {\n  this._views = {};\n  this._indexByModel = {};\n  this._indexByCustom = {};\n  this._updateLength();\n\n  _.each(views, _.bind(this.add, this));\n};\n\nemulateCollection(Container.prototype, '_views');\n\n// Container Methods\n// -----------------\n\n_.extend(Container.prototype, {\n\n  // Add a view to this container. Stores the view\n  // by `cid` and makes it searchable by the model\n  // cid (and model itself). Optionally specify\n  // a custom key to store an retrieve the view.\n  add(view, customIndex) {\n    return this._add(view, customIndex)._updateLength();\n  },\n\n  // To be used when avoiding call _updateLength\n  // When you are done adding all your new views\n  // call _updateLength\n  _add(view, customIndex) {\n    const viewCid = view.cid;\n\n    // store the view\n    this._views[viewCid] = view;\n\n    // index it by model\n    if (view.model) {\n      this._indexByModel[view.model.cid] = viewCid;\n    }\n\n    // index by custom\n    if (customIndex) {\n      this._indexByCustom[customIndex] = viewCid;\n    }\n\n    return this;\n  },\n\n  // Find a view by the model that was attached to\n  // it. Uses the model's `cid` to find it.\n  findByModel(model) {\n    return this.findByModelCid(model.cid);\n  },\n\n  // Find a view by the `cid` of the model that was attached to\n  // it. Uses the model's `cid` to find the view `cid` and\n  // retrieve the view using it.\n  findByModelCid(modelCid) {\n    const viewCid = this._indexByModel[modelCid];\n    return this.findByCid(viewCid);\n  },\n\n  // Find a view by a custom indexer.\n  findByCustom(index) {\n    const viewCid = this._indexByCustom[index];\n    return this.findByCid(viewCid);\n  },\n\n  // Find by index. This is not guaranteed to be a\n  // stable index.\n  findByIndex(index) {\n    return _.values(this._views)[index];\n  },\n\n  // retrieve a view by its `cid` directly\n  findByCid(cid) {\n    return this._views[cid];\n  },\n\n  // Remove a view\n  remove(view) {\n    return this._remove(view)._updateLength();\n  },\n\n  // To be used when avoiding call _updateLength\n  // When you are done adding all your new views\n  // call _updateLength\n  _remove(view) {\n    const viewCid = view.cid;\n\n    // delete model index\n    if (view.model) {\n      delete this._indexByModel[view.model.cid];\n    }\n\n    // delete custom index\n    _.some(this._indexByCustom, _.bind(function(cid, key) {\n      if (cid === viewCid) {\n        delete this._indexByCustom[key];\n        return true;\n      }\n    }, this));\n\n    // remove the view from the container\n    delete this._views[viewCid];\n\n    return this;\n  },\n\n  // Update the `.length` attribute on this container\n  _updateLength() {\n    this.length = _.size(this._views);\n\n    return this;\n  }\n});\n\nexport default Container;\n","// Collection View\n// ---------------\n\nimport _                  from 'underscore';\nimport Backbone           from 'backbone';\nimport destroyBackboneView from './utils/destroy-backbone-view';\nimport isNodeAttached     from './common/is-node-attached';\nimport monitorViewEvents  from './common/monitor-view-events';\nimport { triggerMethodOn } from './common/trigger-method';\nimport ChildViewContainer from './child-view-container';\nimport MarionetteError    from './error';\nimport ViewMixin          from './mixins/view';\n\nconst ClassOptions = [\n  'behaviors',\n  'childView',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewOptions',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'filter',\n  'emptyView',\n  'emptyViewOptions',\n  'modelEvents',\n  'reorderOnSort',\n  'sort',\n  'triggers',\n  'ui',\n  'viewComparator'\n];\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n\n  // flag for maintaining the sorted order of the collection\n  sort: true,\n\n  // constructor\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  //\n  // option to pass `{viewComparator: compFunction()}` to allow the `CollectionView`\n  // to use a custom sort order for the collection.\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this.once('render', this._initialEvents);\n    this._initChildViewStorage();\n    this._bufferedChildren = [];\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n  },\n\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\n  // elements into a document fragment and then insert that document fragment into the page\n  _startBuffering() {\n    this._isBuffering = true;\n  },\n\n  _endBuffering() {\n    const shouldTriggerAttach = !!this._isAttached;\n    const triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n    this._isBuffering = false;\n\n    _.each(triggerOnChildren, child => {\n      triggerMethodOn(child, 'before:attach', child);\n    });\n\n    this.attachBuffer(this, this._createBuffer());\n\n    _.each(triggerOnChildren, child => {\n      child._isAttached = true;\n      triggerMethodOn(child, 'attach', child);\n    });\n\n    this._bufferedChildren = [];\n  },\n\n  _getImmediateChildren() {\n    return _.values(this.children._views);\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\n      this.listenTo(this.collection, 'reset', this.render);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Handle a child added to the collection\n  _onCollectionAdd(child, collection, opts) {\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n    // When filtered or when there is no initial index, calculate index.\n    if (this.filter || index === false) {\n      index = _.indexOf(this._filteredSortedModels(index), child);\n    }\n\n    if (this._shouldAddChild(child, index)) {\n      this._destroyEmptyView();\n      this._addChild(child, index)\n    }\n  },\n\n  // Handle collection update model removals\n  _onCollectionUpdate(collection, options) {\n    const changes = options.changes;\n    this._removeChildModels(changes.removed);\n  },\n\n  // Remove the child views and destroy them.\n  // This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  // \"models\" is an array of models and the corresponding views\n  // will be removed and destroyed from the CollectionView\n  _removeChildModels(models, {checkEmpty} = {}) {\n    const shouldCheckEmpty = checkEmpty !== false;\n\n    // Used to determine where to update the remaining\n    // sibling view indices after these views are removed.\n    const removedViews = this._getRemovedViews(models);\n\n    if (!removedViews.length) {\n      return;\n    }\n\n    this.children._updateLength();\n\n    // decrement the index of views after this one\n    this._updateIndices(removedViews, false);\n\n    if (shouldCheckEmpty) {\n      this._checkEmpty();\n    }\n  },\n\n  // Returns the views that will be used for re-indexing\n  // through CollectionView#_updateIndices.\n  _getRemovedViews(models) {\n\n    // Returning a view means something was removed.\n    return _.reduce(models, (removingViews, model) => {\n      const view = this.children.findByModel(model);\n\n      if (!view || view._isDestroyed) {\n        return removingViews;\n      }\n\n      this._removeChildView(view);\n\n      removingViews.push(view);\n\n      return removingViews;\n    }, []);\n  },\n\n  _findGreatestIndexedView(views) {\n\n    return _.reduce(views, (greatestIndexedView, view) => {\n      // Even if the index is `undefined`, a view will get returned.\n      if (!greatestIndexedView || greatestIndexedView._index < view._index) {\n        return view;\n      }\n\n      return greatestIndexedView;\n    }, undefined);\n  },\n\n  _removeChildView(view) {\n    this.triggerMethod('before:remove:child', this, view);\n\n    this.children._remove(view);\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      destroyBackboneView(view);\n    }\n\n    delete view._parent;\n    this.stopListening(view);\n    this.triggerMethod('remove:child', this, view);\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    return this;\n  },\n\n  // Render children views. Override this method to provide your own implementation of a\n  // render function for the collection view.\n  render() {\n    this._ensureViewIsIntact();\n    this.triggerMethod('before:render', this);\n    this._renderChildren();\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n  // collection view, we are only adding or removing the related childrenViews.\n  setFilter(filter, {preventRender} = {}) {\n    const canBeRendered = this._isRendered && !this._isDestroyed;\n    const filterChanged = this.filter !== filter;\n    const shouldRender = canBeRendered && filterChanged && !preventRender;\n\n    if (shouldRender) {\n      const previousModels = this._filteredSortedModels();\n      this.filter = filter;\n      const models = this._filteredSortedModels();\n      this._applyModelDeltas(models, previousModels);\n    } else {\n      this.filter = filter;\n    }\n\n    return this;\n  },\n\n  // `removeFilter` is actually an alias for removing filters.\n  removeFilter(options) {\n    return this.setFilter(null, options);\n  },\n\n  // Calculate and apply difference by cid between `models` and `previousModels`.\n  _applyModelDeltas(models, previousModels) {\n    const currentIds = {};\n    _.each(models, (model, index) => {\n      const addedChildNotExists = !this.children.findByModel(model);\n      if (addedChildNotExists) {\n        this._onCollectionAdd(model, this.collection, {at: index});\n      }\n      currentIds[model.cid] = true;\n    });\n\n    const removeModels = _.filter(previousModels, (prevModel) => {\n      return !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n    });\n\n    this._removeChildModels(removeModels);\n  },\n\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n  // rendering all the collectionView.\n  reorder() {\n    const children = this.children;\n    const models = this._filteredSortedModels();\n\n    if (!models.length && this._showingEmptyView) { return this; }\n\n    const anyModelsAdded = _.some(models, function(model) {\n      return !children.findByModel(model);\n    });\n\n    // If there are any new models added due to filtering we need to add child views,\n    // so render as normal.\n    if (anyModelsAdded) {\n      this.render();\n    } else {\n\n      const filteredOutModels = [];\n\n      // Get the DOM nodes in the same order as the models and\n      // find the model that were children before but aren't in this new order.\n      const elsToReorder = children.reduce(function(viewEls, view) {\n        const index = _.indexOf(models, view.model);\n\n        if (index === -1) {\n          filteredOutModels.push(view.model);\n          return viewEls;\n        }\n\n        view._index = index;\n\n        viewEls[index] = view.el;\n\n        return viewEls;\n      }, new Array(models.length));\n\n      this.triggerMethod('before:reorder', this);\n\n      // Since append moves elements that are already in the DOM, appending the elements\n      // will effectively reorder them.\n      this._appendReorderedChildren(elsToReorder);\n\n      // remove any views that have been filtered out\n      this._removeChildModels(filteredOutModels);\n\n      this.triggerMethod('reorder', this);\n    }\n    return this;\n  },\n\n  // Render view after sorting. Override this method to change how the view renders\n  // after a `sort` on the collection.\n  resortView() {\n    if (this.reorderOnSort) {\n      this.reorder();\n    } else {\n      this._renderChildren();\n    }\n    return this;\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will render.\n  _sortViews() {\n    const models = this._filteredSortedModels();\n\n    // check for any changes in sort order of views\n    const orderChanged = _.find(models, (item, index) => {\n      const view = this.children.findByModel(item);\n      return !view || view._index !== index;\n    });\n\n    if (orderChanged) {\n      this.resortView();\n    }\n  },\n\n  // Internal reference to what index a `emptyView` is.\n  _emptyViewIndex: -1,\n\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\n  // if necessary\n  _appendReorderedChildren(children) {\n    this.$el.append(children);\n  },\n\n  // Internal method. Separated so that CompositeView can have more control over events\n  // being triggered, around the rendering process\n  _renderChildren() {\n    if (this._isRendered) {\n      this._destroyEmptyView();\n      this._destroyChildren({checkEmpty: false});\n    }\n\n    const models = this._filteredSortedModels();\n    if (this.isEmpty({processedModels: models})) {\n      this._showEmptyView();\n    } else {\n      this.triggerMethod('before:render:children', this);\n      this._startBuffering();\n      this._showCollection(models);\n      this._endBuffering();\n      this.triggerMethod('render:children', this);\n    }\n  },\n\n  _createView(model, index) {\n    const ChildView = this._getChildView(model);\n    const childViewOptions = this._getChildViewOptions(model, index);\n    const view = this.buildChildView(model, ChildView, childViewOptions);\n    return view;\n  },\n\n  _setupChildView(view, index) {\n    view._parent = this;\n\n    monitorViewEvents(view);\n\n    // set up the child view event forwarding\n    this._proxyChildEvents(view);\n\n    if (this.sort) {\n      view._index = index;\n    }\n  },\n\n  // Internal method to loop through collection and show each child view.\n  _showCollection(models) {\n    _.each(models, _.bind(this._addChild, this));\n    this.children._updateLength();\n  },\n\n  // Allow the collection to be sorted by a custom view comparator\n  _filteredSortedModels(addedAt) {\n    if (!this.collection || !this.collection.length) { return []; }\n\n    const viewComparator = this.getViewComparator();\n    let models = this.collection.models;\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n    if (viewComparator) {\n      let addedModel;\n      // Preserve `at` location, even for a sorted view\n      if (addedAt) {\n        addedModel = models[addedAt];\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n      }\n      models = this._sortModelsBy(models, viewComparator);\n      if (addedModel) {\n        models.splice(addedAt, 0, addedModel);\n      }\n    }\n\n    // Filter after sorting in case the filter uses the index\n    models = this._filterModels(models);\n\n    return models;\n  },\n\n  getViewComparator() {\n    return this.viewComparator;\n  },\n\n  // Filter an array of models, if a filter exists\n  _filterModels(models) {\n    if (this.filter) {\n      models = _.filter(models, (model, index) => {\n        return this._shouldAddChild(model, index);\n      });\n    }\n    return models;\n  },\n\n  _sortModelsBy(models, comparator) {\n    if (typeof comparator === 'string') {\n      return _.sortBy(models, (model) => {\n        return model.get(comparator);\n      });\n    } else if (comparator.length === 1) {\n      return _.sortBy(models, _.bind(comparator, this));\n    } else {\n      return models.sort(_.bind(comparator, this));\n    }\n  },\n\n  // Internal method to show an empty view in place of a collection of child views,\n  // when the collection is empty\n  _showEmptyView() {\n    const EmptyView = this._getEmptyView();\n\n    if (EmptyView && !this._showingEmptyView) {\n      this._showingEmptyView = true;\n\n      const model = new Backbone.Model();\n      let emptyViewOptions =\n        this.emptyViewOptions || this.childViewOptions;\n      if (_.isFunction(emptyViewOptions)) {\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n      }\n\n      const view = this.buildChildView(model, EmptyView, emptyViewOptions);\n\n      this.triggerMethod('before:render:empty', this, view);\n      this.addChildView(view, 0);\n      this.triggerMethod('render:empty', this, view);\n    }\n  },\n\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\n  // a collection view has been rendered empty, and then a child is added to the collection.\n  _destroyEmptyView() {\n    if (this._showingEmptyView) {\n      this.triggerMethod('before:remove:empty', this);\n\n      this._destroyChildren();\n      delete this._showingEmptyView;\n\n      this.triggerMethod('remove:empty', this);\n    }\n  },\n\n  // Retrieve the empty view class\n  _getEmptyView() {\n    const emptyView = this.emptyView;\n\n    if (!emptyView) { return; }\n\n    return this._getView(emptyView);\n  },\n\n  // Retrieve the `childView` class\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    let childView = this.childView;\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // First check if the `view` is a view class (the common case)\n  // Then check if it's a function (which we assume that returns a view class)\n  _getView(view, child) {\n    if (view.prototype instanceof Backbone.View || view === Backbone.View) {\n      return view;\n    } else if (_.isFunction(view)) {\n      return view.call(this, child);\n    }\n  },\n\n  // Internal method for building and adding a child view\n  _addChild(child, index) {\n    const view = this._createView(child, index);\n    this.addChildView(view, index);\n\n    return view;\n  },\n\n  _getChildViewOptions(child, index) {\n    if (_.isFunction(this.childViewOptions)) {\n      return this.childViewOptions(child, index);\n    }\n\n    return this.childViewOptions;\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index.\n  // This will also update the indices of later views in the collection in order to keep the\n  // children in sync with the collection.\n  addChildView(view, index) {\n    this.triggerMethod('before:add:child', this, view);\n    this._setupChildView(view, index);\n\n    // Store the child view itself so we can properly remove and/or destroy it later\n    if (this._isBuffering) {\n      // Add to children, but don't update children's length.\n      this.children._add(view);\n    } else {\n      // increment indices of views after this one\n      this._updateIndices(view, true);\n      this.children.add(view);\n    }\n\n    this._renderView(view);\n\n    this._attachView(view, index);\n\n    this.triggerMethod('add:child', this, view);\n\n    return view;\n  },\n\n  // Internal method. This decrements or increments the indices of views after the added/removed\n  // view to keep in sync with the collection.\n  _updateIndices(views, increment) {\n    if (!this.sort) {\n      return;\n    }\n\n    const view = _.isArray(views) ? this._findGreatestIndexedView(views) : views;\n\n    // update the indexes of views after this one\n    this.children.each((laterView) => {\n      if (laterView._index >= view._index) {\n        laterView._index += increment ? 1 : -1;\n      }\n    });\n  },\n\n  _renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n  },\n\n  _attachView(view, index) {\n    // Only trigger attach if already attached and not buffering,\n    // otherwise _endBuffering() or Region#show() handles this.\n    const shouldTriggerAttach = !view._isAttached && !this._isBuffering && this._isAttached;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    this.attachHtml(this, view, index);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  // Build a `childView` for a model in the collection.\n  buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    return new ChildViewClass(options);\n  },\n\n  // Remove the child view and destroy it. This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  removeChildView(view) {\n    if (!view || view._isDestroyed) {\n      return view;\n    }\n\n    this._removeChildView(view);\n    this.children._updateLength();\n    // decrement the index of views after this one\n    this._updateIndices(view, false);\n    return view;\n  },\n\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n  isEmpty(options) {\n    let models;\n    if (_.result(options, 'processedModels')) {\n      models = options.processedModels;\n    } else {\n      models = this.collection ? this.collection.models : [];\n      models = this._filterModels(models);\n    }\n    return models.length === 0;\n  },\n\n  // If empty, show the empty view\n  _checkEmpty() {\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(collectionView, buffer) {\n    collectionView.$el.append(buffer);\n  },\n\n  // Create a fragment buffer from the currently buffered children\n  _createBuffer() {\n    const elBuffer = document.createDocumentFragment();\n    _.each(this._bufferedChildren, (b) => {\n      elBuffer.appendChild(b.el);\n    });\n    return elBuffer;\n  },\n\n  // Append the HTML to the collection's `el`. Override this method to do something other\n  // than `.append`.\n  attachHtml(collectionView, childView, index) {\n    if (collectionView._isBuffering) {\n      // buffering happens on reset events and initial renders\n      // in order to reduce the number of inserts into the\n      // document, which are expensive.\n      collectionView._bufferedChildren.splice(index, 0, childView);\n    } else {\n      // If we've already rendered the main collection, append\n      // the new child into the correct order if we need to. Otherwise\n      // append to the end.\n      if (!collectionView._insertBefore(childView, index)) {\n        collectionView._insertAfter(childView);\n      }\n    }\n  },\n\n  // Internal method. Check whether we need to insert the view into the correct position.\n  _insertBefore(childView, index) {\n    let currentView;\n    const findPosition = this.sort && (index < this.children.length - 1);\n    if (findPosition) {\n      // Find the view after this one\n      currentView = this.children.find((view) => {\n        return view._index === index + 1;\n      });\n    }\n\n    if (currentView) {\n      currentView.$el.before(childView.el);\n      return true;\n    }\n\n    return false;\n  },\n\n  // Internal method. Append a view to the end of the $el\n  _insertAfter(childView) {\n    this.$el.append(childView.el);\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren({checkEmpty: false});\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren(options) {\n    if (!this.children.length) {\n      return;\n    }\n\n    this.triggerMethod('before:destroy:children', this);\n    const childModels = this.children.map('model');\n    this._removeChildModels(childModels, options);\n    this.triggerMethod('destroy:children', this);\n  },\n\n  // Return true if the given child should be shown. Return false otherwise.\n  // The filter will be passed (child, index, collection), where\n  //  'child' is the given model\n  //  'index' is the index of that model in the collection\n  //  'collection' is the collection referenced by this CollectionView\n  _shouldAddChild(child, index) {\n    const filter = this.filter;\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n  },\n\n  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n  _proxyChildEvents(view) {\n    this.listenTo(view, 'all', this._childViewEventHandler);\n  }\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","// Composite View\n// --------------\n\nimport _               from 'underscore';\nimport deprecate       from './utils/deprecate';\nimport MarionetteError from './error';\nimport CollectionView  from './collection-view';\nimport View            from './view';\n\nconst ClassOptions = [\n  'childViewContainer',\n  'template',\n  'templateContext'\n];\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView\n// @deprecated\nconst CompositeView = CollectionView.extend({\n\n  // Setting up the inheritance chain which allows changes to\n  // Marionette.CollectionView.prototype.constructor which allows overriding\n  // option to pass '{sort: false}' to prevent the CompositeView from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  constructor(options) {\n    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n\n    this.mergeOptions(options, ClassOptions);\n\n    CollectionView.prototype.constructor.apply(this, arguments);\n  },\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents() {\n\n    // Bind only after composite view is rendered to avoid adding child views\n    // to nonexistent childViewContainer\n\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\n      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Retrieve the `childView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.childView` or Marionette.CompositeView if no `childView`\n  // has been defined. As happens in CollectionView, `childView` can\n  // be a function (which should return a view class).\n  _getChildView(child) {\n    let childView = this.childView;\n\n    // for CompositeView, if `childView` is not specified, we'll get the same\n    // composite view class rendered for each child in the collection\n    // then check if the `childView` is a view class (the common case)\n    // finally check if it's a function (which we assume that returns a view class)\n    if (!childView) {\n      return this.constructor;\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // Return the serialized model\n  serializeData() {\n    return this.serializeModel();\n  },\n\n  // Renders the model and the collection.\n  render() {\n    this._ensureViewIsIntact();\n    this._isRendering = true;\n    this.resetChildViewContainer();\n\n    this.triggerMethod('before:render', this);\n\n    this._renderTemplate();\n    this.bindUIElements();\n    this.renderChildren();\n\n    this._isRendering = false;\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  renderChildren() {\n    if (this._isRendered || this._isRendering) {\n      CollectionView.prototype._renderChildren.call(this);\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(compositeView, buffer) {\n    const $container = this.getChildViewContainer(compositeView);\n    $container.append(buffer);\n  },\n\n  // Internal method. Append a view to the end of the $el.\n  // Overidden from CollectionView to ensure view is appended to\n  // childViewContainer\n  _insertAfter(childView) {\n    const $container = this.getChildViewContainer(this, childView);\n    $container.append(childView.el);\n  },\n\n  // Internal method. Append reordered childView'.\n  // Overidden from CollectionView to ensure reordered views\n  // are appended to childViewContainer\n  _appendReorderedChildren(children) {\n    const $container = this.getChildViewContainer(this);\n    $container.append(children);\n  },\n\n  // Internal method to ensure an `$childViewContainer` exists, for the\n  // `attachHtml` method to use.\n  getChildViewContainer(containerView, childView) {\n    if (!!containerView.$childViewContainer) {\n      return containerView.$childViewContainer;\n    }\n\n    let container;\n    const childViewContainer = containerView.childViewContainer;\n    if (childViewContainer) {\n\n      const selector = _.result(containerView, 'childViewContainer');\n\n      if (selector.charAt(0) === '@' && containerView.ui) {\n        container = containerView.ui[selector.substr(4)];\n      } else {\n        container = containerView.$(selector);\n      }\n\n      if (container.length <= 0) {\n        throw new MarionetteError({\n          name: 'ChildViewContainerMissingError',\n          message: `The specified \"childViewContainer\" was not found: ${containerView.childViewContainer}`\n        });\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$childViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$childViewContainer` on render\n  resetChildViewContainer() {\n    if (this.$childViewContainer) {\n      this.$childViewContainer = undefined;\n    }\n  }\n});\n\n// To prevent duplication but allow the best View organization\n// Certain View methods are mixed directly into the deprecated CompositeView\nconst MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'mixinTemplateContext', 'attachElContent');\n_.extend(CompositeView.prototype, MixinFromView);\n\nexport default CompositeView;\n","// Behavior\n// --------\n\n// A Behavior is an isolated set of DOM /\n// user interactions that can be mixed into any View.\n// Behaviors allow you to blackbox View specific interactions\n// into portable logical chunks, keeping your views simple and your code DRY.\n\nimport _                  from 'underscore';\nimport getUniqueEventName from './utils/get-unique-event-name';\nimport MarionetteObject   from './object';\nimport DelegateEntityEventsMixin      from './mixins/delegate-entity-events';\nimport TriggersMixin      from './mixins/triggers';\nimport UIMixin            from './mixins/ui';\n\nconst ClassOptions = [\n  'collectionEvents',\n  'events',\n  'modelEvents',\n  'triggers',\n  'ui'\n];\n\nconst Behavior = MarionetteObject.extend({\n  cidPrefix: 'mnb',\n\n  constructor(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n    this.defaults = _.clone(_.result(this, 'defaults', {}));\n    this._setOptions(this.defaults, options);\n    this.mergeOptions(this.options, ClassOptions);\n\n    // Construct an internal UI hash using\n    // the behaviors UI hash and then the view UI hash.\n    // This allows the user to use UI hash elements\n    // defined in the parent view as well as those\n    // defined in the given behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override a\n    // selector under an UI key.\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n    MarionetteObject.apply(this, arguments);\n  },\n\n  // proxy behavior $ method to the view\n  // this is useful for doing jquery DOM lookups\n  // scoped to behaviors view.\n  $() {\n    return this.view.$.apply(this.view, arguments);\n  },\n\n  // Stops the behavior from listening to events.\n  // Overrides Object#destroy to prevent additional events from being triggered.\n  destroy() {\n    this.stopListening();\n\n    return this;\n  },\n\n  proxyViewProperties() {\n    this.$el = this.view.$el;\n    this.el = this.view.el;\n\n    return this;\n  },\n\n  bindUIElements() {\n    this._bindUIElements();\n\n    return this;\n  },\n\n  unbindUIElements() {\n    this._unbindUIElements();\n\n    return this;\n  },\n\n  getUI(name) {\n    this.view._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents() {\n    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  getEvents() {\n    // Normalize behavior events hash to allow\n    // a user to use the @ui. syntax.\n    const behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n    // binds the handler to the behavior and builds a unique eventName\n    return _.reduce(behaviorEvents, (events, behaviorHandler, key) => {\n      if (!_.isFunction(behaviorHandler)) {\n        behaviorHandler = this[behaviorHandler];\n      }\n      if (!behaviorHandler) { return; }\n      key = getUniqueEventName(key);\n      events[key] = _.bind(behaviorHandler, this);\n      return events;\n    }, {});\n  },\n\n  // Internal method to build all trigger handlers for a given behavior\n  getTriggers() {\n    if (!this.triggers) { return; }\n\n    // Normalize behavior triggers hash to allow\n    // a user to use the @ui. syntax.\n    const behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    return this._getViewTriggers(this.view, behaviorTriggers);\n  }\n\n});\n\n_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default Behavior;\n","// Application\n// -----------\nimport buildRegion from './common/build-region';\nimport MarionetteObject from './object';\nimport Region from './region';\n\nconst ClassOptions = [\n  'region',\n  'regionClass'\n];\n\n// A container for a Marionette application.\nconst Application = MarionetteObject.extend({\n  cidPrefix: 'mna',\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    this._initRegion();\n\n    MarionetteObject.prototype.constructor.apply(this, arguments);\n  },\n\n  regionClass: Region,\n\n  _initRegion() {\n    const region = this.region;\n\n    if (!region) { return; }\n\n    const defaults = {\n      regionClass: this.regionClass\n    };\n\n    this._region = buildRegion(region, defaults);\n  },\n\n  getRegion() {\n    return this._region;\n  },\n\n  showView(view, ...args) {\n    const region = this.getRegion();\n    return region.show(view, ...args);\n  },\n\n  getView() {\n    return this.getRegion().currentView;\n  },\n\n  // kick off all of the application's processes.\n  start(options) {\n    this.triggerMethod('before:start', this, options);\n    this.triggerMethod('start', this, options);\n    return this;\n  }\n\n});\n\nexport default Application;\n","// App Router\n// ----------\n\n// Reduce the boilerplate code of handling route events\n// and then calling a single method on another object,\n// called a controller.\n// Have your routers configured to call the method on\n// your controller, directly.\n//\n// Configure an AppRouter with `appRoutes`.\n//\n// App routers can only take one `controller` object.\n// It is recommended that you divide your controller\n// objects in to smaller pieces of related functionality\n// and have multiple routers / controllers, instead of\n// just one giant router and controller.\n//\n// You can also add standard routes to an AppRouter.\n\nimport Backbone                from 'backbone';\nimport _                       from 'underscore';\nimport { triggerMethod }       from './common/trigger-method';\nimport MarionetteError         from './error';\nimport CommonMixin             from './mixins/common';\n\nconst ClassOptions = [\n  'appRoutes',\n  'controller'\n];\n\nconst AppRouter = Backbone.Router.extend({\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    Backbone.Router.apply(this, arguments);\n\n    const appRoutes = this.appRoutes;\n    const controller = this._getController();\n    this.processAppRoutes(controller, appRoutes);\n    this.on('route', this._processOnRoute, this);\n  },\n\n  // Similar to route method on a Backbone Router but\n  // method is called on the controller\n  appRoute(route, methodName) {\n    const controller = this._getController();\n    this._addAppRoute(controller, route, methodName);\n    return this;\n  },\n\n  // process the route event and trigger the onRoute\n  // method call, if it exists\n  _processOnRoute(routeName, routeArgs) {\n    // make sure an onRoute before trying to call it\n    if (_.isFunction(this.onRoute)) {\n      // find the path that matches the current route\n      const routePath = _.invert(this.appRoutes)[routeName];\n      this.onRoute(routeName, routePath, routeArgs);\n    }\n  },\n\n  // Internal method to process the `appRoutes` for the\n  // router, and turn them in to routes that trigger the\n  // specified method on the specified `controller`.\n  processAppRoutes(controller, appRoutes) {\n    if (!appRoutes) { return this; }\n\n    const routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n    _.each(routeNames, route => {\n      this._addAppRoute(controller, route, appRoutes[route]);\n    });\n\n    return this;\n  },\n\n  _getController() {\n    return this.controller;\n  },\n\n  _addAppRoute(controller, route, methodName) {\n    const method = controller[methodName];\n\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was not found on the controller`);\n    }\n\n    this.route(route, methodName, _.bind(method, controller));\n  },\n\n  triggerMethod: triggerMethod\n});\n\n_.extend(AppRouter.prototype, CommonMixin);\n\nexport default AppRouter;\n","import Backbone           from 'backbone';\nimport {version}          from '../package.json';\n\nimport proxy              from './utils/proxy';\nimport extend             from './utils/extend';\nimport deprecate          from './utils/deprecate';\n\nimport isNodeAttached     from './common/is-node-attached';\nimport mergeOptions       from './common/merge-options';\nimport getOption          from './common/get-option';\nimport normalizeMethods   from './common/normalize-methods';\nimport monitorViewEvents  from './common/monitor-view-events';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from './common/bind-events';\n\nimport {\n  bindRequests,\n  unbindRequests\n} from './common/bind-requests';\n\nimport {\n  triggerMethod,\n  triggerMethodOn\n} from './common/trigger-method';\n\n\nimport MarionetteObject   from './object';\nimport TemplateCache      from './template-cache';\nimport View               from './view';\nimport CollectionView     from './collection-view';\nimport CompositeView      from './composite-view';\nimport Behavior           from './behavior';\nimport Region             from './region';\nimport Application        from './application';\nimport AppRouter          from './app-router';\nimport MarionetteError    from './error';\n\nimport behaviorsLookup    from './config/behaviors-lookup';\nimport Renderer           from './config/renderer';\n\nimport {\n  FEATURES,\n  isEnabled,\n  setEnabled\n} from './config/features';\n\nconst previousMarionette = Backbone.Marionette;\nconst Marionette = Backbone.Marionette = {};\n\n// This allows you to run multiple instances of Marionette on the same\n// webapp. After loading the new version, call `noConflict()` to\n// get a reference to it. At the same time the old version will be\n// returned to Backbone.Marionette.\nMarionette.noConflict = function() {\n  Backbone.Marionette = previousMarionette;\n  return this;\n};\n\n// Utilities\nMarionette.bindEvents = proxy(bindEvents);\nMarionette.unbindEvents = proxy(unbindEvents);\nMarionette.bindRequests = proxy(bindRequests);\nMarionette.unbindRequests = proxy(unbindRequests);\nMarionette.mergeOptions = proxy(mergeOptions);\nMarionette.getOption = proxy(getOption);\nMarionette.normalizeMethods = proxy(normalizeMethods);\nMarionette.extend = extend;\nMarionette.isNodeAttached = isNodeAttached;\nMarionette.deprecate = deprecate;\nMarionette.triggerMethod = proxy(triggerMethod);\nMarionette.triggerMethodOn = triggerMethodOn;\nMarionette.isEnabled = isEnabled;\nMarionette.setEnabled = setEnabled;\nMarionette.monitorViewEvents = monitorViewEvents;\n\nMarionette.Behaviors = {};\nMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n// Classes\nMarionette.Application = Application;\nMarionette.AppRouter = AppRouter;\nMarionette.Renderer = Renderer;\nMarionette.TemplateCache = TemplateCache;\nMarionette.View = View;\nMarionette.CollectionView = CollectionView;\nMarionette.CompositeView = CompositeView;\nMarionette.Behavior = Behavior;\nMarionette.Region = Region;\nMarionette.Error = MarionetteError;\nMarionette.Object = MarionetteObject;\n\n// Configuration\nMarionette.DEV_MODE = false;\nMarionette.FEATURES = FEATURES;\nMarionette.VERSION = version;\n\nexport default Marionette;\n"],"sourceRoot":"/source/"}